└── frontend
    ├── /frontend/src/App.css
    ├── /frontend/src/App.jsx
    ├── /frontend/src/assets/react.svg
    ├── /frontend/src/components/admin/algorithmTest/AlgorithmTester.jsx
    ├── /frontend/src/components/admin/currentBookings/AddBookingModal.jsx
    ├── /frontend/src/components/admin/currentBookings/CurrentBookings.jsx
    ├── /frontend/src/components/admin/currentBookings/EditBookingModal.jsx
    ├── /frontend/src/components/admin/futureBookings/FutureBookings.jsx
    ├── /frontend/src/components/admin/metrics/MetricsDashboard.jsx
    ├── /frontend/src/components/admin/metrics/StatsGrid.jsx
    ├── /frontend/src/components/admin/metrics/VisualizeBookings.jsx
    ├── /frontend/src/components/admin/settings/OperationalSettings.jsx
    ├── /frontend/src/components/admin/sharedBookings/BookingsCalendarView.jsx
    ├── /frontend/src/components/admin/sharedBookings/BookingsChart.jsx
    ├── /frontend/src/components/admin/sharedBookings/BookingsCompactView.jsx
    ├── /frontend/src/components/admin/sharedBookings/BookingsOverview.jsx
    ├── /frontend/src/components/admin/sharedBookings/DaySchedule.jsx
    ├── /frontend/src/components/admin/sharedBookings/TableUsage.jsx
    ├── /frontend/src/components/admin/utils/LanguagePicker.jsx
    ├── /frontend/src/components/bookingWizard/BookingWizard.jsx
    ├── /frontend/src/components/bookingWizard/steps/ContactInfoStep.jsx
    ├── /frontend/src/components/bookingWizard/steps/ReservationDetailsStep.jsx
    ├── /frontend/src/components/bookingWizard/steps/TimeSlotStep.jsx
    ├── /frontend/src/components/datePicker/Calendar.jsx
    ├── /frontend/src/components/datePicker/Compact.jsx
    ├── /frontend/src/components/datePicker/DatePicker.jsx
    ├── /frontend/src/components/datePicker/SkeletonCalendar.jsx
    ├── /frontend/src/components/datePicker/SkeletonCompact.jsx
    ├── /frontend/src/components/layout/AnimatedBackground.jsx
    ├── /frontend/src/components/layout/Layout.jsx
    ├── /frontend/src/components/layout/ProtectedRoute.jsx
    ├── /frontend/src/index.css
    ├── /frontend/src/main.jsx
    ├── /frontend/src/pages/AdminDashboard.jsx
    ├── /frontend/src/pages/BookingPage.jsx
    ├── /frontend/src/pages/HomePage.jsx
    ├── /frontend/src/pages/LoginPage.jsx
    ├── /frontend/src/services/bookingService.js
    ├── /frontend/src/services/datePicker.js
    ├── /frontend/src/services/i18n.js
    ├── /frontend/src/services/languages/ca.js
    ├── /frontend/src/services/languages/en.js
    ├── /frontend/src/services/languages/es.js
    ├── /frontend/src/services/mealOverrides.js
    ├── /frontend/src/services/settingsService.js

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/App.css
    /* src/App.css */
    
    .app {
      font-family: Arial, sans-serif;
      margin: 0 auto;
      max-width: 600px;
    }
    
    .nav-link {
      margin-right: 1rem;
      color: #333;
      text-decoration: none;
    }
    
    .home-page,
    .booking-page,
    .booking-form {
      margin-top: 1rem;
    }
    
    .error {
      color: red;
    }
    
    .confirmation {
      color: green;
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/App.jsx
    // src/App.jsx
    import React from "react";
    import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
    
    // Pages
    import HomePage from "./pages/HomePage";
    import BookingPage from "./pages/BookingPage";
    import AdminDashboard from "./pages/AdminDashboard";
    import LoginPage from "./pages/LoginPage";
    
    // Components
    import Layout from "./components/layout/Layout.jsx";
    import ProtectedRoute from "./components/layout/ProtectedRoute.jsx";
    
    function App() {
        return (
            <Router>
                {/* Layout includes your nav bar, etc. */}
                <Layout>
                    <Routes>
                        <Route path="/" element={<HomePage />} />
                        <Route path="/booking" element={<BookingPage />} />
    
                        {/* Public Login Route */}
                        <Route path="/login" element={<LoginPage />} />
    
                        {/* Protected admin Dashboard */}
                        <Route
                            path="/admin"
                            element={
                                <ProtectedRoute>
                                    <AdminDashboard />
                                </ProtectedRoute>
                            }
                        />
                    </Routes>
                </Layout>
            </Router>
        );
    }
    
    export default App;

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/assets/react.svg
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/algorithmTest/AlgorithmTester.jsx
    // frontend/src/components/admin/algorithmTest/AlgorithmTester.jsx
    
    import React, { useState, useEffect } from "react";
    import PropTypes from "prop-types";
    import { format, parseISO, isValid, addMinutes } from "date-fns";
    import {
        IconPlayerPlay,
        IconCheck,
        IconX,
        IconClock,
    } from "@tabler/icons-react";
    import {
        createBooking,
        fetchTableAvailabilityRange,
    } from "../../../services/bookingService";
    import DaySchedule from "../sharedBookings/DaySchedule";
    import { translate, getLanguage } from "../../../services/i18n";
    
    function SkeletonDaySchedule() {
        return (
            <div className="mt-6 border rounded bg-white p-4 shadow animate-pulse space-y-4">
                <div className="h-6 bg-gray-200 rounded w-3/4" />
                <div className="h-4 bg-gray-200 rounded" />
                <div className="h-4 bg-gray-200 rounded" />
                <div className="h-4 bg-gray-200 rounded" />
            </div>
        );
    }
    
    export default function AlgorithmTester({ bookings = [], onRefresh = () => {} }) {
        const lang = getLanguage();
        const t    = (key, vars) => translate(lang, key, vars);
    
        const todayISO = format(new Date(), "yyyy-MM-dd");
        const [sizesRaw, setSizesRaw]     = useState("");
        const [dateStr, setDateStr]       = useState(todayISO);
        const [meal, setMeal]             = useState("lunch");
        const [time, setTime]             = useState("13:00");
        const [running, setRunning]       = useState(false);
        const [results, setResults]       = useState([]);
        const [ta, setTA]                 = useState({});
        const [loadingTA, setLoadingTA]   = useState(false);
    
        const dateObj = isValid(parseISO(dateStr)) ? parseISO(dateStr) : null;
    
        const loadTA = async () => {
            if (!dateStr) return;
            setLoadingTA(true);
            try {
                const [lunch, dinner] = await Promise.all([
                    fetchTableAvailabilityRange(dateStr, dateStr, "lunch"),
                    fetchTableAvailabilityRange(dateStr, dateStr, "dinner"),
                ]);
                const merged = {};
                [lunch, dinner].forEach((src) =>
                    Object.entries(src).forEach(([d, obj]) => {
                        merged[d] = merged[d]
                            ? { ...merged[d], ...obj }
                            : obj;
                    })
                );
                setTA(merged);
            } catch {
                setTA({});
            } finally {
                setLoadingTA(false);
            }
        };
    
        useEffect(() => {
            loadTA();
        }, [dateStr]);
    
        const run = async () => {
            const parts = sizesRaw
                .split(/[,\s]+/)
                .map((t) => parseInt(t, 10))
                .filter((n) => n > 0 && Number.isFinite(n));
    
            if (parts.length === 0) {
                alert(t("tester.partySizes"));
                return;
            }
    
            setRunning(true);
            setResults([]);
            let baseTime = time;
            const log = [];
    
            for (let i = 0; i < parts.length; i++) {
                const guests = parts[i];
                if (i > 0) {
                    const [h, m] = baseTime.split(":").map(Number);
                    const t2 = addMinutes(new Date(0, 0, 0, h, m), 2);
                    baseTime = format(t2, "HH:mm");
                }
                try {
                    await createBooking({
                        date:           dateStr,
                        meal_type:      meal,
                        reserved_time:  `${baseTime}:00`,
                        total_adults:   guests,
                        total_kids:     0,
                        full_name:      `TEST-${guests}-${Date.now()}`,
                        phone:          null,
                        email:          null,
                        special_requests: null,
                        gdpr_consent:     false,
                        marketing_opt_in: false,
                        long_stay:        false,
                    });
                    log.push({ size: guests, ok: true, msg: t("tester.ok") });
                } catch (e) {
                    log.push({
                        size: guests,
                        ok:   false,
                        msg:  e?.response?.data?.error || t("tester.rejected"),
                    });
                }
            }
    
            setResults(log);
            setRunning(false);
            if (typeof onRefresh === "function") await onRefresh();
            await loadTA();
        };
    
        const dayBookings = bookings.filter(
            (b) => (b.table_availability?.date || b.date) === dateStr
        );
    
        return (
            <div className="space-y-8">
                {/* Control panel */}
                <div className="bg-white p-6 rounded shadow max-w-lg">
                    <h2 className="text-xl font-bold mb-4 flex items-center">
                        <IconClock className="w-5 h-5 mr-2" />
                        {t("tester.title")}
                    </h2>
    
                    <label className="block text-sm font-medium mb-1">
                        {t("tester.partySizes")}
                    </label>
                    <input
                        className="w-full border rounded p-2 mb-4"
                        placeholder={t("tester.partySizes")}
                        value={sizesRaw}
                        onChange={(e) => setSizesRaw(e.target.value)}
                    />
    
                    <div className="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <label className="block text-sm font-medium mb-1">
                                {t("tester.date")}
                            </label>
                            <input
                                type="date"
                                className="w-full border rounded p-2"
                                value={dateStr}
                                onChange={(e) => setDateStr(e.target.value)}
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium mb-1">
                                {t("tester.meal")}
                            </label>
                            <select
                                className="w-full border rounded p-2"
                                value={meal}
                                onChange={(e) => setMeal(e.target.value)}
                            >
                                <option value="lunch">Lunch</option>
                                <option value="dinner">Dinner</option>
                            </select>
                        </div>
                    </div>
    
                    <label className="block text-sm font-medium mb-1">
                        {t("tester.startingTime")}
                    </label>
                    <input
                        type="time"
                        step={900}
                        className="w-full border rounded p-2 mb-6"
                        value={time}
                        onChange={(e) => setTime(e.target.value)}
                    />
    
                    <button
                        onClick={run}
                        disabled={running}
                        className="flex items-center px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
                    >
                        <IconPlayerPlay className="w-5 h-5 mr-2" />
                        {running ? `${t("tester.runTest")}…` : t("tester.runTest")}
                    </button>
    
                    {results.length > 0 && (
                        <div className="mt-6">
                            <h4 className="font-semibold mb-2">{t("tester.results")}</h4>
                            <ul className="space-y-1 text-sm">
                                {results.map((r, i) => (
                                    <li
                                        key={i}
                                        className={`flex items-center ${
                                            r.ok ? "text-green-700" : "text-red-600"
                                        }`}
                                    >
                                        {r.ok ? (
                                            <IconCheck className="w-4 h-4 mr-1" />
                                        ) : (
                                            <IconX className="w-4 h-4 mr-1" />
                                        )}
                                        {r.size} → {r.msg}
                                    </li>
                                ))}
                            </ul>
                        </div>
                    )}
                </div>
    
                {/* Day schedule */}
                {dateObj && (
                    loadingTA ? (
                        <SkeletonDaySchedule />
                    ) : (
                        <DaySchedule
                            selectedDate={dateObj}
                            bookings={dayBookings}
                            tableAvailability={ta}
                            onClose={() => {}}
                            enableZoom
                        />
                    )
                )}
    
                {loadingTA && (
                    <p className="text-sm text-gray-500">{t("tester.loadingTA")}</p>
                )}
            </div>
        );
    }
    
    AlgorithmTester.propTypes = {
        bookings: PropTypes.arrayOf(PropTypes.object),
        onRefresh: PropTypes.func,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/currentBookings/AddBookingModal.jsx
    // frontend/src/components/admin/currentBookings/AddBookingModal.jsx
    import React, { useState, useMemo, useEffect } from "react";
    import PropTypes from "prop-types";
    import { format } from "date-fns";
    import { enUS, es as esLocale, ca as caLocale } from "date-fns/locale";
    import { createBooking } from "../../../services/bookingService";
    import { getDayMealTypes } from "../../../services/datePicker";
    import { translate, getLanguage } from "../../../services/i18n";
    
    const localeMap = { en: enUS, es: esLocale, ca: caLocale };
    
    // helper to build 15-minute slot list
    const buildSlots = (start, end) => {
        const out = [];
        let [h, m] = start.split(":").map(Number);
        const [eh, em] = end.split(":").map(Number);
        while (h < eh || (h === eh && m <= em)) {
            out.push(`${String(h).padStart(2, "0")}:${String(m).padStart(2, "0")}:00`);
            m += 15;
            if (m === 60) { h += 1; m = 0; }
        }
        return out;
    };
    
    const lunchFirstSlots  = buildSlots("13:00", "14:00");
    const lunchSecondSlots = buildSlots("15:00", "16:00");
    const dinnerSlots      = buildSlots("20:00", "22:00");
    
    export default function AddBookingModal({ dateObj, onClose, onSaved }) {
        const lang   = getLanguage();
        const t      = (k, p) => translate(lang, k, p);
        const locale = localeMap[lang] || enUS;
    
        const allowedMeals = useMemo(
            () => getDayMealTypes(dateObj.getDay()),
            [dateObj]
        );
    
        // form state
        const [mealType, setMealType] = useState(
            allowedMeals.includes("lunch") ? "lunch" : "dinner"
        );
        const [round, setRound]       = useState("first");
        const [time, setTime]         = useState(lunchFirstSlots[0]);
        const [fullName, setFullName] = useState("");
        const [party, setParty]       = useState(2);
        const [phone, setPhone]       = useState("");
        const [saving, setSaving]     = useState(false);
        const [error, setError]       = useState("");
    
        // keep time options valid
        const timeOptions = useMemo(() => {
            if (mealType === "lunch")
                return round === "first" ? lunchFirstSlots : lunchSecondSlots;
            return dinnerSlots;
        }, [mealType, round]);
    
        useEffect(() => {
            if (!timeOptions.includes(time)) setTime(timeOptions[0]);
        }, [timeOptions, time]);
    
        // save handler
        const saveBooking = async () => {
            if (saving) return;
            if (!fullName.trim() || party < 1) {
                setError(
                    t("modal.errorRequired")
                );
                return;
            }
            setSaving(true); setError("");
            try {
                await createBooking({
                    date: format(dateObj, "yyyy-MM-dd"),
                    meal_type: mealType,
                    reserved_time: time,
                    total_adults: party,
                    total_kids: 0,
                    full_name: fullName.trim(),
                    phone: phone || null,
                    email: null,
                    special_requests: null,
                    gdpr_consent: false,
                    marketing_opt_in: false,
                });
                onSaved();
            } catch (e) {
                setError(
                    e.response?.data?.error || t("modal.saveError")
                );
            } finally { setSaving(false); }
        };
    
        const closedDay = allowedMeals.length === 0;
    
        return (
            <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
                <div className="bg-white p-6 rounded shadow-lg w-full max-w-sm">
                    <h3 className="text-lg font-bold mb-4">
                        {t("modal.addTitle")}
                    </h3>
    
                    {/* localized date line */}
                    <p className="text-sm mb-4">
                        {format(dateObj, "EEEE, d MMMM yyyy", { locale })}
                    </p>
    
                    {closedDay ? (
                        <p className="text-red-600 font-semibold mb-4">
                            {t("modal.closedDay")}
                        </p>
                    ) : (
                        <>
                            {/* name */}
                            <label className="block mb-1 text-sm font-medium">
                                {t("modal.fullName")}
                            </label>
                            <input
                                className="w-full border p-2 mb-3 rounded"
                                value={fullName}
                                onChange={(e) => setFullName(e.target.value)}
                            />
    
                            {/* party */}
                            <label className="block mb-1 text-sm font-medium">
                                {t("modal.guests")}
                            </label>
                            <input
                                type="number"
                                min={1}
                                className="w-full border p-2 mb-3 rounded"
                                value={party}
                                onChange={(e) => setParty(Number(e.target.value))}
                            />
    
                            {/* phone */}
                            <label className="block mb-1 text-sm font-medium">
                                {t("modal.phoneOptional")}
                            </label>
                            <input
                                className="w-full border p-2 mb-3 rounded"
                                value={phone}
                                onChange={(e) => setPhone(e.target.value)}
                            />
    
                            {/* meal radio */}
                            <div className="flex space-x-4 mb-3">
                                {allowedMeals.includes("lunch") && (
                                    <label className="flex items-center space-x-1">
                                        <input
                                            type="radio"
                                            checked={mealType === "lunch"}
                                            onChange={() => setMealType("lunch")}
                                        />
                                        <span>{t("modal.meal.lunch")}</span>
                                    </label>
                                )}
                                {allowedMeals.includes("dinner") && (
                                    <label className="flex items-center space-x-1">
                                        <input
                                            type="radio"
                                            checked={mealType === "dinner"}
                                            onChange={() => setMealType("dinner")}
                                        />
                                        <span>{t("modal.meal.dinner")}</span>
                                    </label>
                                )}
                            </div>
    
                            {/* round radio */}
                            {mealType === "lunch" && (
                                <div className="flex space-x-4 mb-3">
                                    <label className="flex items-center space-x-1">
                                        <input
                                            type="radio"
                                            checked={round === "first"}
                                            onChange={() => setRound("first")}
                                        />
                                        <span>{t("modal.round.first")}</span>
                                    </label>
                                    <label className="flex items-center space-x-1">
                                        <input
                                            type="radio"
                                            checked={round === "second"}
                                            onChange={() => setRound("second")}
                                        />
                                        <span>{t("modal.round.second")}</span>
                                    </label>
                                </div>
                            )}
    
                            {/* time select */}
                            <label className="block mb-1 text-sm font-medium">
                                {t("modal.time")}
                            </label>
                            <select
                                className="w-full border p-2 mb-3 rounded"
                                value={time}
                                onChange={(e) => setTime(e.target.value)}
                            >
                                {timeOptions.map((tOpt) => (
                                    <option key={tOpt} value={tOpt}>
                                        {tOpt.slice(0, 5)}
                                    </option>
                                ))}
                            </select>
                        </>
                    )}
    
                    {error && <p className="text-red-600 mb-2">{error}</p>}
    
                    <div className="flex justify-end space-x-2">
                        <button
                            onClick={onClose}
                            className="px-4 py-1 border rounded"
                            disabled={saving}
                        >
                            {t("modal.close")}
                        </button>
                        {!closedDay && (
                            <button
                                onClick={saveBooking}
                                className="px-4 py-1 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50"
                                disabled={saving}
                            >
                                {saving ? (
                                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                                ) : (
                                    t("modal.save")
                                )}
                            </button>
                        )}
                    </div>
                </div>
            </div>
        );
    }
    
    AddBookingModal.propTypes = {
        dateObj: PropTypes.instanceOf(Date).isRequired,
        onClose: PropTypes.func.isRequired,
        onSaved: PropTypes.func.isRequired,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/currentBookings/CurrentBookings.jsx
    // frontend/src/components/admin/currentBookings/CurrentBookings.jsx
    import React, { useState, useMemo, useEffect } from "react";
    import PropTypes from "prop-types";
    import { format, addDays } from "date-fns";
    import {
        IconChevronLeft,
        IconChevronRight,
    } from "@tabler/icons-react";
    import { enUS, es as esLocale, ca as caLocale } from "date-fns/locale";
    
    import AddBookingModal from "./AddBookingModal";
    import EditBookingModal from "./EditBookingModal";
    import DaySchedule from "../sharedBookings/DaySchedule";
    import { fetchTableAvailabilityRange } from "../../../services/bookingService";
    import { translate, getLanguage } from "../../../services/i18n";
    
    /* ───────── helpers ───────── */
    const localeMap = { en: enUS, es: esLocale, ca: caLocale };
    const getBookingDate = (b) =>
        (b.table_availability?.date || b.date || "").slice(0, 10); // always "YYYY-MM-DD"
    
    function SkeletonDaySchedule() {
        return (
            <div className="mt-6 border rounded bg-white p-4 shadow animate-pulse space-y-4">
                <div className="h-6 bg-gray-200 rounded w-3/4" />
                <div className="h-4 bg-gray-200 rounded" />
                <div className="h-4 bg-gray-200 rounded" />
                <div className="h-4 bg-gray-200 rounded" />
            </div>
        );
    }
    
    export default function CurrentBookings({ bookings, onDataRefresh }) {
        const lang   = getLanguage();
        const t      = (key, vars) => translate(lang, key, vars);
        const locale = localeMap[lang] || enUS;
    
        const [offset, setOffset]               = useState(0);
        const [isAdding, setIsAdding]           = useState(false);
        const [editingBooking, setEditingBooking] = useState(null);
    
        const [tableAvailability, setTableAvailability] = useState({});
        const [loadingTA, setLoadingTA]                 = useState(false);
    
        const dateObj = useMemo(() => addDays(new Date(), offset), [offset]);
        const dateStr = format(dateObj, "yyyy-MM-dd");
    
        /* bookings for the selected day */
        const todaysBookings = useMemo(
            () => bookings.filter((b) => getBookingDate(b) === dateStr),
            [bookings, dateStr]
        );
    
        const totalBookings = todaysBookings.length;
        const totalClients  = todaysBookings.reduce(
            (sum, b) => sum + (b.total_adults || 0) + (b.total_kids || 0),
            0
        );
    
        /* ─── load table-availability for the chosen date ─── */
        useEffect(() => {
            let cancelled = false;
            setLoadingTA(true);
    
            Promise.all([
                fetchTableAvailabilityRange(dateStr, dateStr, "lunch"),
                fetchTableAvailabilityRange(dateStr, dateStr, "dinner"),
            ])
                .then(([lunch, dinner]) => {
                    if (cancelled) return;
                    const merged = {};
                    [lunch, dinner].forEach((src) =>
                        Object.entries(src).forEach(([d, info]) => {
                            merged[d] = merged[d] ? { ...merged[d], ...info } : info;
                        })
                    );
                    setTableAvailability(merged);
                })
                .catch(() => {
                    if (!cancelled) setTableAvailability({});
                })
                .finally(() => {
                    if (!cancelled) setLoadingTA(false);
                });
    
            return () => {
                cancelled = true;
            };
        }, [dateStr]);
    
        const title =
            offset === 0
                ? t("admin.today")
                : format(dateObj, "EEEE, MMMM d", { locale });
    
        return (
            <div className="bg-white p-4 rounded shadow">
                {/* header + controls */}
                <div className="flex items-center justify-between flex-wrap gap-2 mb-4">
                    <h2 className="text-xl font-bold">{title}</h2>
                    <div className="space-x-2 flex items-center">
                        <button
                            onClick={() => setOffset((o) => o - 1)}
                            className="w-8 h-8 flex justify-center items-center bg-white shadow rounded-full hover:bg-gray-100"
                            aria-label={t("calendar.prev")}
                        >
                            <IconChevronLeft className="w-5 h-5 text-gray-500" />
                        </button>
                        <button
                            onClick={() => setOffset((o) => o + 1)}
                            className="w-8 h-8 flex justify-center items-center bg-white shadow rounded-full hover:bg-gray-100"
                            aria-label={t("calendar.next")}
                        >
                            <IconChevronRight className="w-5 h-5 text-gray-500" />
                        </button>
                        <button
                            onClick={() => setIsAdding(true)}
                            className="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700"
                        >
                            {t("admin.manualBooking")}
                        </button>
                    </div>
                </div>
    
                {/* metrics */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                    <div className="bg-blue-50 p-3 rounded text-center">
                        <p className="text-xs text-gray-600">{t("admin.bookings")}</p>
                        <p className="text-xl font-bold">{totalBookings}</p>
                    </div>
                    <div className="bg-green-50 p-3 rounded text-center">
                        <p className="text-xs text-gray-600">{t("admin.totalClients")}</p>
                        <p className="text-xl font-bold">{totalClients}</p>
                    </div>
                </div>
    
                {/* day schedule or skeleton */}
                {loadingTA ? (
                    <SkeletonDaySchedule />
                ) : (
                    <DaySchedule
                        selectedDate={dateObj}
                        bookings={todaysBookings}
                        tableAvailability={tableAvailability}
                        onClose={() => {}}
                        enableZoom
                    />
                )}
    
                {/* add / edit modals */}
                {isAdding && (
                    <AddBookingModal
                        dateObj={dateObj}
                        onClose={() => setIsAdding(false)}
                        onSaved={() => {
                            setIsAdding(false);
                            onDataRefresh();
                        }}
                    />
                )}
                {editingBooking && (
                    <EditBookingModal
                        booking={editingBooking}
                        onClose={() => setEditingBooking(null)}
                        onSaved={() => {
                            setEditingBooking(null);
                            onDataRefresh();
                        }}
                    />
                )}
            </div>
        );
    }
    
    CurrentBookings.propTypes = {
        bookings:      PropTypes.array.isRequired,
        onDataRefresh: PropTypes.func.isRequired,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/currentBookings/EditBookingModal.jsx
    // frontend/src/components/admin/currentBookings/EditBookingModal.jsx
    // (unchanged – reproduced verbatim)
    import React, { useState } from "react";
    import PropTypes from "prop-types";
    import { updateBooking, deleteBooking } from "../../../services/bookingService";
    
    export default function EditBookingModal({ booking, onClose, onSaved }) {
        const [fullName, setFullName] = useState(booking.full_name);
        const [adults, setAdults] = useState(booking.total_adults);
        const [kids, setKids] = useState(booking.total_kids);
        const [phone, setPhone] = useState(booking.phone || "");
        const [time, setTime] = useState(booking.reserved_time.slice(0, 5));
        const [saving, setSaving] = useState(false);
        const [error, setError] = useState("");
    
        const handleSave = async () => {
            if (saving) return;
            if (!fullName.trim() || adults < 1) {
                return setError("Name and at least 1 adult required.");
            }
            setSaving(true);
            setError("");
    
            try {
                await updateBooking(booking.id, {
                    full_name:
                        fullName.trim() !== booking.full_name
                            ? fullName.trim()
                            : undefined,
                    total_adults: adults,
                    total_kids: kids,
                    phone: phone || null,
                    reserved_time: `${time}:00`,
                });
                onSaved();
            } catch (e) {
                console.error(e);
                setError(e.response?.data?.error ?? "Update failed");
            } finally {
                setSaving(false);
            }
        };
    
        const handleDelete = async () => {
            if (!window.confirm("Delete this booking?")) return;
            setSaving(true);
    
            try {
                await deleteBooking(booking.id);
                onSaved();
            } catch (e) {
                console.error(e);
                setError("Delete failed");
            } finally {
                setSaving(false);
            }
        };
    
        return (
            <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
                <div className="bg-white p-6 rounded shadow-lg w-full max-w-sm">
                    <h3 className="text-lg font-bold mb-4">Edit Booking</h3>
    
                    <label className="block mb-1 text-sm font-medium">Full Name</label>
                    <input
                        className="w-full border p-2 mb-3 rounded"
                        value={fullName}
                        onChange={(e) => setFullName(e.target.value)}
                    />
    
                    <div className="grid grid-cols-2 gap-2 mb-3">
                        <div>
                            <label className="block mb-1 text-sm font-medium">Adults</label>
                            <input
                                type="number"
                                min={1}
                                className="w-full border p-2 rounded"
                                value={adults}
                                onChange={(e) => setAdults(Number(e.target.value))}
                            />
                        </div>
                        <div>
                            <label className="block mb-1 text-sm font-medium">Kids</label>
                            <input
                                type="number"
                                min={0}
                                className="w-full border p-2 rounded"
                                value={kids}
                                onChange={(e) => setKids(Number(e.target.value))}
                            />
                        </div>
                    </div>
    
                    <label className="block mb-1 text-sm font-medium">Phone</label>
                    <input
                        className="w-full border p-2 mb-3 rounded"
                        value={phone}
                        onChange={(e) => setPhone(e.target.value)}
                    />
    
                    <label className="block mb-1 text-sm font-medium">Time (HH:MM)</label>
                    <input
                        type="time"
                        step={900}
                        className="w-full border p-2 mb-3 rounded"
                        value={time}
                        onChange={(e) => setTime(e.target.value)}
                    />
    
                    {error && <p className="text-red-600 mb-2">{error}</p>}
    
                    <div className="flex justify-between items-center">
                        <button
                            onClick={handleDelete}
                            className="px-3 py-1 text-red-600 underline disabled:opacity-50"
                            disabled={saving}
                        >
                            Delete
                        </button>
                        <div className="space-x-2">
                            <button
                                onClick={onClose}
                                className="px-4 py-1 border rounded"
                                disabled={saving}
                            >
                                Close
                            </button>
                            <button
                                onClick={handleSave}
                                className="px-4 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50 flex items-center justify-center"
                                disabled={saving}
                            >
                                {saving ? (
                                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                                ) : (
                                    "Save"
                                )}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
    
    EditBookingModal.propTypes = {
        booking: PropTypes.shape({
            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
                .isRequired,
            full_name: PropTypes.string,
            total_adults: PropTypes.number,
            total_kids: PropTypes.number,
            phone: PropTypes.string,
            reserved_time: PropTypes.string,
        }).isRequired,
        onClose: PropTypes.func.isRequired,
        onSaved: PropTypes.func.isRequired,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/futureBookings/FutureBookings.jsx
    // frontend/src/components/admin/futureBookings/FutureBookings.jsx
    
    import React from "react";
    import BookingsOverview from "../sharedBookings/BookingsOverview";
    
    // eslint-disable-next-line react/prop-types
    export default function FutureBookings({ bookings }) {
        return (
            <BookingsOverview
                mode="future"
                bookings={bookings}
                showChart={false}
                allowDrill={true}
            />
        );
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/metrics/MetricsDashboard.jsx
    // frontend/src/components/admin/metrics/MetricsDashboard.jsx
    import React, { useState } from "react";
    import PropTypes from "prop-types";
    
    import StatsGrid from "./StatsGrid";
    import BookingsOverview from "../sharedBookings/BookingsOverview";
    import { translate, getLanguage } from "../../../services/i18n";
    
    export default function MetricsDashboard({ bookings }) {
        const lang = getLanguage();
        const t = (k, p) => translate(lang, k, p);
    
        /* keep track of the bookings slice for the KPI grid */
        const [windowBookings, setWindowBookings] = useState(bookings);
    
        return (
            <div className="space-y-8">
                {/* KPI grid */}
                <StatsGrid bookings={windowBookings} />
    
                {/* Explorer: FUTURE mode, with chart and explicit view toggle */}
                <BookingsOverview
                    mode="future"
                    bookings={bookings}
                    showChart={true}
                    allowDrill={false}
                    onWindowChange={setWindowBookings}
                    customTitle={t("overview.bookings")}
                    hideViewToggle={false}
                />
            </div>
        );
    }
    
    MetricsDashboard.propTypes = {
        bookings: PropTypes.arrayOf(PropTypes.object).isRequired,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/metrics/StatsGrid.jsx
    // frontend/src/components/admin/metrics/StatsGrid.jsx
    import React, { useMemo } from "react";
    import PropTypes from "prop-types";
    import {
        IconCalendarStats,
        IconUsers,
        IconLayoutGrid,
        IconTrophy,
    } from "@tabler/icons-react";
    import { parseISO } from "date-fns";
    import { translate, getLanguage } from "../../../services/i18n";
    
    function computeMetrics(bookings) {
        let totalBookings = 0;
        let totalGuests   = 0;
        const uniqueGuests = new Set();
        const perDayGuests = {};
    
        bookings.forEach((b) => {
            const dateStr = b.table_availability?.date || b.date;
            if (!dateStr) return;
    
            const guests = (b.total_adults || 0) + (b.total_kids || 0);
            totalBookings += 1;
            totalGuests   += guests;
    
            /* per-day count */
            const dKey = parseISO(dateStr).toISOString().slice(0,10);
            perDayGuests[dKey] = (perDayGuests[dKey] || 0) + guests;
    
            /* unique guest counted by full name (fallback id) */
            uniqueGuests.add(b.full_name?.trim() || `#${b.id}`);
        });
    
        const peakGuests = Object.values(perDayGuests).reduce(
            (m, v) => Math.max(m, v),
            0
        );
    
        return {
            totalBookings,
            totalGuests,
            uniqueGuests: uniqueGuests.size,
            avgGuests:    totalBookings === 0 ? 0 : (totalGuests / totalBookings).toFixed(1),
            peakGuests,
        };
    }
    
    export default function StatsGrid({ bookings = [] }) {
        const lang = getLanguage();
        const t    = (k, vars) => translate(lang, k, vars);
    
        const m = useMemo(() => computeMetrics(bookings), [bookings]);
    
        const data = [
            {
                key:   "bookings",
                title: t("overview.bookings"),
                icon:  IconCalendarStats,
                value: m.totalBookings,
            },
            {
                key:   "guests",
                title: t("overview.guests"),
                icon:  IconUsers,
                value: m.totalGuests,
            },
            {
                key:   "avg",
                title: t("overview.avgGuests"),
                icon:  IconLayoutGrid,
                value: m.avgGuests,
            },
            {
                key:   "peak",
                title: t("overview.peakDayGuests"),
                icon:  IconTrophy,
                value: m.peakGuests,
            },
            {
                key:   "unique",
                title: t("overview.uniqueNames"),
                icon:  IconUsers,
                value: m.uniqueGuests,
            },
        ];
    
        return (
            <div className="p-4">
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-5 gap-4">
                    {data.map((stat) => {
                        const StatIcon = stat.icon;
                        return (
                            <div
                                key={stat.key}
                                className="border rounded-md p-4 shadow bg-white"
                            >
                                <div className="flex items-center justify-between">
                                    <p className="text-xs text-gray-500 font-semibold uppercase">
                                        {stat.title}
                                    </p>
                                    <StatIcon className="w-5 h-5 text-gray-400" />
                                </div>
                                <div className="mt-4 text-2xl font-bold text-gray-800">
                                    {stat.value}
                                </div>
                            </div>
                        );
                    })}
                </div>
            </div>
        );
    }
    
    StatsGrid.propTypes = {
        bookings: PropTypes.arrayOf(PropTypes.object),
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/metrics/VisualizeBookings.jsx
    // frontend/src/components/admin/metrics/VisualizeBookings.jsx
    
    import React, { useState } from "react";
    import { format } from "date-fns";
    import {
        enUS,
        es as esLocale,
        ca as caLocale,
    } from "date-fns/locale";
    import TableUsage from "./TableUsage";
    import { translate, getLanguage } from "../../../services/i18n";
    
    const localeMap = {
        en: enUS,
        es: esLocale,
        ca: caLocale,
    };
    
    export default function DaySchedule({
                                            selectedDate,
                                            bookings,
                                            tableAvailability,
                                            onClose,
                                            enableZoom = false,
                                        }) {
        const lang   = getLanguage();
        const t      = (k, p) => translate(lang, k, p);
        const locale = localeMap[lang] || enUS;
    
        // **Re-added** showFloor state:
        const [showFloor, setShowFloor] = useState(false);
    
        if (!selectedDate) return null;
    
        const dateStr = format(selectedDate, "yyyy-MM-dd", { locale });
        const dayInfo = tableAvailability[dateStr];
    
        if (!dayInfo || dayInfo === "closed") {
            return (
                <div className="mt-6 border rounded bg-white p-4 shadow">
                    <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-bold">
                            {t("schedule.header", {
                                date: format(selectedDate, "EEEE, MMMM d, yyyy", { locale }),
                            })}
                        </h3>
                        <button onClick={onClose} className="text-sm text-red-500 underline">
                            {t("admin.close")}
                        </button>
                    </div>
                    <p
                        className={
                            dayInfo === "closed"
                                ? "text-red-600 font-semibold"
                                : "text-gray-700"
                        }
                    >
                        {dayInfo === "closed"
                            ? "CLOSED"
                            : t("schedule.noBookings")}
                    </p>
                </div>
            );
        }
    
        const roundKeys = ["first_round", "second_round", "dinner_round"].filter(
            (rk) => rk in dayInfo
        );
        const roundBookings = {};
        roundKeys.forEach((rk) => {
            roundBookings[rk] = bookings
                .filter((b) => {
                    const d = b.table_availability?.date;
                    if (d !== dateStr) return false;
                    if (rk.includes("first")) return b.reserved_time < "15:00:00";
                    if (rk.includes("second"))
                        return (
                            b.reserved_time >= "15:00:00" &&
                            b.reserved_time < "20:00:00"
                        );
                    return b.reserved_time >= "20:00:00";
                })
                .sort((a, b) => a.reserved_time.localeCompare(b.reserved_time));
        });
    
        const fullStock = { 2: 0, 4: 0, 6: 0 };
        roundKeys.forEach((rk) => {
            const avail = dayInfo[rk]?.availability || {};
            const bookedCounts = { 2: 0, 4: 0, 6: 0 };
            roundBookings[rk].forEach((bk) => {
                const cap = bk.table_availability?.capacity || 0;
                bookedCounts[cap] = (bookedCounts[cap] || 0) + 1;
            });
            [2, 4, 6].forEach((cap) => {
                const totalHere = (avail[cap] ?? 0) + bookedCounts[cap];
                fullStock[cap] = Math.max(fullStock[cap], totalHere);
            });
        });
    
        const prettyRound = (key) => {
            if (key.includes("first"))
                return { lbl: t("schedule.round.lunchFirst"), bg: "bg-green-50" };
            if (key.includes("second"))
                return { lbl: t("schedule.round.lunchSecond"), bg: "bg-orange-50" };
            return { lbl: t("schedule.round.dinner"), bg: "bg-purple-50" };
        };
    
        return (
            <div className="mt-6 border rounded bg-white p-4 shadow">
                <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-bold">
                        {t("schedule.header", {
                            date: format(selectedDate, "EEEE, MMMM d, yyyy", { locale }),
                        })}
                    </h3>
                    <div className="space-x-3">
                        {enableZoom && (
                            <button
                                onClick={() => setShowFloor((v) => !v)}
                                className="text-sm px-2 py-1 border rounded hover:bg-gray-100"
                            >
                                {showFloor
                                    ? t("admin.hideFloor")
                                    : t("admin.expandFloor")}
                            </button>
                        )}
                        <button
                            onClick={onClose}
                            className="text-sm text-red-500 underline hover:text-red-700"
                        >
                            {t("admin.close")}
                        </button>
                    </div>
                </div>
    
                {roundKeys.map((rk) => {
                    const { lbl, bg } = prettyRound(rk);
                    const rows        = roundBookings[rk];
    
                    return (
                        <div key={rk} className="mb-8">
                            <h4 className="text-md font-semibold mb-2">{lbl}</h4>
                            {rows.length > 0 ? (
                                <table className="min-w-full divide-y divide-gray-200 text-sm mb-3">
                                    <thead>
                                    <tr className="bg-gray-50">
                                        <th className="px-3 py-2 text-left font-semibold">
                                            {t("schedule.table.time")}
                                        </th>
                                        <th className="px-3 py-2 text-left font-semibold">
                                            {t("schedule.table.name")}
                                        </th>
                                        <th className="px-3 py-2 text-left font-semibold">
                                            {t("schedule.table.totalClients")}
                                        </th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    {rows.map((bk) => (
                                        <tr
                                            key={bk.id}
                                            className={`${bg} hover:bg-yellow-50 transition`}
                                        >
                                            <td className="px-3 py-2">
                                                {bk.reserved_time.slice(0, 5)}
                                            </td>
                                            <td className="px-3 py-2 truncate max-w-[160px]">
                                                {bk.full_name}
                                            </td>
                                            <td className="px-3 py-2">
                                                {bk.total_adults + bk.total_kids}
                                            </td>
                                        </tr>
                                    ))}
                                    </tbody>
                                </table>
                            ) : (
                                <p className="text-gray-500 mb-3">
                                    {t("schedule.noBookings")}
                                </p>
                            )}
                            {showFloor && (
                                <TableUsage
                                    capacityTotals={fullStock}
                                    bookings={rows}
                                    expanded
                                />
                            )}
                        </div>
                    );
                })}
            </div>
        );
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/settings/OperationalSettings.jsx
    // frontend/src/components/admin/settings/OperationalSettings.jsx
    
    import React, { useState, useEffect, useCallback } from "react";
    import { format } from "date-fns";
    import { motion, AnimatePresence } from "framer-motion";
    
    import BookingsCalendarView      from "../sharedBookings/BookingsCalendarView";
    import { clearAvailabilityCache } from "../../../services/bookingService";
    import { getDayMealTypes }        from "../../../services/datePicker";
    import { translate, getLanguage } from "../../../services/i18n";
    import { fetchMealOverrides, toggleMealOverride } from "../../../services/mealOverrides";
    
    import SkeletonCalendar from "../../datePicker/SkeletonCalendar.jsx";
    
    /* ────── HTTP helpers ────── */
    async function toggleClosedDay(dateYMD) {
        await fetch("/api/closed-days/toggle", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ date: dateYMD }),
        });
    }
    async function toggleOpenDay(dateYMD) {
        await fetch("/api/open-days/toggle", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ date: dateYMD }),
        });
    }
    async function fetchClosedDays() {
        const r = await fetch("/api/closed-days");
        const j = await r.json();
        return Array.isArray(j) ? j.map((d) => d.slice(0, 10)) : [];
    }
    async function fetchOpenDays() {
        const r = await fetch("/api/open-days");
        const j = await r.json();
        return Array.isArray(j) ? j.map((d) => d.slice(0, 10)) : [];
    }
    async function deleteBookingsForDate(dateYMD) {
        await fetch(`/api/bookings/by-date/${dateYMD}`, { method: "DELETE" });
    }
    
    /* success tick */
    const SuccessTick = ({ id }) => (
        <AnimatePresence mode="wait">
            <motion.div
                key={id}
                initial={{ scale: 0, opacity: 0 }}
                animate={{ scale: 1.25, opacity: 1 }}
                exit={{ scale: 0, opacity: 0 }}
                transition={{ type: "spring", stiffness: 260, damping: 20 }}
                className="absolute top-2 right-2 text-green-600 pointer-events-none select-none"
            >
                ✓
            </motion.div>
        </AnimatePresence>
    );
    
    /* progress button */
    function ProgressButton({
                                colour      = "blue",
                                idleLabel,
                                loadingLabel,
                                successLabel,
                                onClick,
                                disabled = false,
                            }) {
        const [state, setState]   = useState("idle");  // idle | loading | success
        const [progress, setProg] = useState(0);
        const timerRef = React.useRef(null);
    
        React.useEffect(() => {
            if (state !== "loading") return;
            timerRef.current = setInterval(() => {
                setProg((p) => (p < 95 ? p + 1 : p));
            }, 25);
            return () => clearInterval(timerRef.current);
        }, [state]);
    
        const start = () => { setProg(0); setState("loading"); };
        const finish= () => {
            clearInterval(timerRef.current);
            setProg(100); setState("success");
            setTimeout(() => { setState("idle"); setProg(0); }, 1500);
        };
    
        const handle = async () => {
            if (state === "loading" || disabled) return;
            try {
                start();
                await onClick();
                finish();
            } catch (e) {
                clearInterval(timerRef.current);
                console.error(e);
                setState("idle");
                setProg(0);
                alert(e?.response?.data?.error || "Action failed");
            }
        };
    
        const base = state === "success" ? "green" : colour;
        const colourClasses = {
            blue:  "bg-blue-600 hover:bg-blue-700",
            red:   "bg-red-600 hover:bg-red-700",
            green: "bg-green-600 hover:bg-green-700",
        }[base];
    
        return (
            <button
                type="button"
                onClick={handle}
                disabled={state === "loading" || disabled}
                className={`relative flex-1 px-4 py-2 rounded text-white font-medium disabled:opacity-50 ${colourClasses}`}
            >
          <span className="relative z-10">
            {state === "idle"    && idleLabel}
              {state === "loading" && loadingLabel}
              {state === "success" && successLabel}
          </span>
                {state === "loading" && (
                    <motion.span
                        style={{ scaleX: progress / 100 }}
                        initial={{ scaleX: 0 }}
                        animate={{ scaleX: progress / 100 }}
                        className="absolute inset-0 bg-white/30 origin-left rounded"
                    />
                )}
            </button>
        );
    }
    
    /*──────────────────────────────────────────────
      Operational Settings
    ──────────────────────────────────────────────*/
    export default function OperationalSettings({ bookings = [], onRefresh = () => {} }) {
        const t = (k,v) => translate(getLanguage(), k, v);
    
        /* component state */
        const [selDate,   setSelDate] = useState(null);
        const [blip,      setBlip]    = useState(null);
        const [closedDays, setClosed] = useState([]);
        const [openDays,   setOpen]   = useState([]);
        const [mealOv,     setMealOv] = useState([]);
        const [loading,    setLoad]   = useState(true);
    
        /* future bookings slice for calendar */
        const todayYMD = new Date().toISOString().slice(0,10);
        const futureBookings = bookings.filter((b) => {
            const d = (b.table_availability?.date || b.date || "").slice(0,10);
            return d >= todayYMD;
        });
    
        /* fetch helpers */
        const refreshClosed = useCallback(async () => setClosed(await fetchClosedDays()), []);
        const refreshOpen   = useCallback(async () => setOpen(await fetchOpenDays()), []);
        const refreshMealOv = useCallback(async () => setMealOv(await fetchMealOverrides()), []);
    
        /* initial load */
        useEffect(() => {
            (async () => {
                setLoad(true);
                await Promise.all([refreshClosed(), refreshOpen(), refreshMealOv()]);
                setLoad(false);
            })();
        }, [refreshClosed, refreshOpen, refreshMealOv]);
    
        /* derive flags for selected date */
        const ymdKey = selDate ? format(selDate, "yyyy-MM-dd") : null;
        const scheduleMeals   = selDate ? getDayMealTypes(selDate.getDay()) : [];
        const scheduleClosed  = selDate && scheduleMeals.length === 0;
        const exceptionallyClosed = selDate && closedDays.includes(ymdKey);
        const exceptionallyOpen   = selDate && openDays.includes(ymdKey);
    
        const mealRow     = mealOv.find((row) => row.date === ymdKey) || {};
        const lunchClosed = !!mealRow.lunch_closed;
        const dinnerClosed= !!mealRow.dinner_closed;
    
        const isClosedNow =
            (scheduleClosed && !exceptionallyOpen) ||
            exceptionallyClosed ||
            (lunchClosed && dinnerClosed);
    
        /* final arrays: filter full-day closures */
        const closedEffective = [
            ...closedDays.filter((d) => !openDays.includes(d)),
            ...mealOv
                .filter((o) => o.lunch_closed && o.dinner_closed)
                .map((o) => o.date),
        ];
    
        /* permissions ------------------------------------------------*/
        const canCloseDay = selDate && (
            (!scheduleClosed && !exceptionallyClosed) ||
            (scheduleClosed && exceptionallyOpen)
        );
        const canOpenDay = selDate && (
            (scheduleClosed && !exceptionallyOpen) ||
            (!scheduleClosed && exceptionallyClosed)
        );
        const canToggleLunch  = selDate && scheduleMeals.includes("lunch");
        const canToggleDinner = selDate && scheduleMeals.includes("dinner");
    
        /* handlers ---------------------------------------------------*/
        const doCloseDay = async () => {
            if (!selDate) return;
            if (scheduleClosed && exceptionallyOpen) {
                await toggleOpenDay(ymdKey);
                await refreshOpen();
            } else {
                await toggleClosedDay(ymdKey);
                await refreshClosed();
            }
            await deleteBookingsForDate(ymdKey);
            await onRefresh();
            clearAvailabilityCache();
            setBlip("close");
            setTimeout(() => setBlip(null), 1500);
        };
    
        const doOpenDay = async () => {
            if (!selDate) return;
            if (scheduleClosed && !exceptionallyOpen) {
                await toggleOpenDay(ymdKey);
                await refreshOpen();
            } else {
                await toggleClosedDay(ymdKey);
                await refreshClosed();
            }
            await onRefresh();
            clearAvailabilityCache();
            setBlip("open");
            setTimeout(() => setBlip(null), 1500);
        };
    
        const toggleLunch = async () => {
            if (!selDate) return;
            await toggleMealOverride(ymdKey, "lunch");
            await refreshMealOv();
            await onRefresh();
            clearAvailabilityCache();
            setBlip("lunch");
            setTimeout(() => setBlip(null), 1500);
        };
        const toggleDinner = async () => {
            if (!selDate) return;
            await toggleMealOverride(ymdKey, "dinner");
            await refreshMealOv();
            await onRefresh();
            clearAvailabilityCache();
            setBlip("dinner");
            setTimeout(() => setBlip(null), 1500);
        };
    
        /* UI ---------------------------------------------------------*/
        return (
            <div className="relative space-y-6">
                {blip && <SuccessTick id={blip} />}
    
                {loading ? (
                    <SkeletonCalendar />
                ) : (
                    <BookingsCalendarView
                        month={new Date()}
                        onMonthChange={() => {}}
                        selectedDate={selDate}
                        onSelectDay={setSelDate}
                        bookings={futureBookings}
                        closedDays={closedEffective}
                        openDays={openDays}
                    />
                )}
    
                <div className="flex flex-col gap-4">
                    <div className="flex gap-4">
                        <ProgressButton
                            colour="red"
                            idleLabel={t("settings.closeDay")}
                            loadingLabel={t("settings.closing")}
                            successLabel={t("settings.successClosed")}
                            onClick={doCloseDay}
                            disabled={!canCloseDay || loading}
                        />
                        <ProgressButton
                            colour="green"
                            idleLabel={t("settings.openDay")}
                            loadingLabel={t("settings.opening")}
                            successLabel={t("settings.successOpened")}
                            onClick={doOpenDay}
                            disabled={!canOpenDay || loading}
                        />
                    </div>
                    <div className="flex gap-4">
                        <ProgressButton
                            colour={lunchClosed ? "green" : "red"}
                            idleLabel={lunchClosed ? t("settings.openLunch") : t("settings.closeLunch")}
                            loadingLabel={t("settings.processing")}
                            successLabel={t("settings.done")}
                            onClick={toggleLunch}
                            disabled={!canToggleLunch || loading}
                        />
                        <ProgressButton
                            colour={dinnerClosed ? "green" : "red"}
                            idleLabel={dinnerClosed ? t("settings.openDinner") : t("settings.closeDinner")}
                            loadingLabel={t("settings.processing")}
                            successLabel={t("settings.done")}
                            onClick={toggleDinner}
                            disabled={!canToggleDinner || loading}
                        />
                    </div>
                </div>
    
                {selDate && (
                    <p className="text-sm text-gray-600">
                        <strong>{format(selDate, "PPP")}</strong> –{" "}
                        {isClosedNow ? t("settings.closed") : t("settings.open")} ·{" "}
                        {t("settings.lunch")}: {lunchClosed ? t("settings.closed") : t("settings.open")},{" "}
                        {t("settings.dinner")}: {dinnerClosed ? t("settings.closed") : t("settings.open")}
                    </p>
                )}
            </div>
        );
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/sharedBookings/BookingsCalendarView.jsx
    // frontend/src/components/admin/sharedBookings/BookingsCalendarView.jsx
    import React, { useState, useEffect } from "react";
    import PropTypes from "prop-types";
    import {
        format,
        startOfMonth,
        endOfMonth,
        startOfWeek,
        endOfWeek,
        addDays,
        addMonths,
        subMonths,
        isSameMonth,
        isSameDay,
    } from "date-fns";
    import { enUS, es as esLocale, ca as caLocale } from "date-fns/locale";
    
    import axios from "axios";
    import { getDayMealTypes } from "../../../services/datePicker";
    import { translate, getLanguage } from "../../../services/i18n";
    
    const localeMap = { en: enUS, es: esLocale, ca: caLocale };
    
    export default function BookingsCalendarView({
                                                     month,                 // controlled month ← NEW
                                                     onMonthChange = () => {},
                                                     selectedDate = null,
                                                     onSelectDay,
                                                     bookings,
                                                     closedDays = [],
                                                     openDays = [],
                                                 }) {
        const lang   = getLanguage();
        const t      = (k, p) => translate(lang, k, p);
        const locale = localeMap[lang] || enUS;
    
        // ─── booking-window horizon (days ahead guests may book) ───
        const [bookingWindowDays, setBookingWindowDays] = useState(30);
        useEffect(() => {
            axios
                .get("/api/meta/horizon-days")
                .then(({ data }) => {
                    const n = parseInt(data, 10);
                    if (Number.isFinite(n) && n > 0) setBookingWindowDays(n);
                })
                .catch(() => {/* leave default */});
        }, []);
    
        // keep internal state in-sync with controlled prop
        const [monthToShow, setMonthToShow] = useState(month || new Date());
        useEffect(() => { if (month) setMonthToShow(month); }, [month]);
    
        // inform parent whenever we change months
        const jumpMonth = (dir) => {
            const next = dir === -1 ? subMonths(monthToShow, 1) : addMonths(monthToShow, 1);
            setMonthToShow(next);
            onMonthChange(next);
        };
    
        const today     = new Date();
        const closedSet = new Set(closedDays);
        const openSet   = new Set(openDays);
    
        /* helpers --------------------------------------------------- */
        const weekdayLabels = Array.from({ length: 7 }).map((_, i) =>
            format(
                addDays(startOfWeek(new Date(), { weekStartsOn: 1, locale }), i),
                "EEE",
                { locale }
            )
        );
    
        const monthStart = startOfMonth(monthToShow);
        const monthEnd   = endOfMonth(monthToShow);
        const gridStart  = startOfWeek(monthStart, { weekStartsOn: 1, locale });
        const gridEnd    = endOfWeek(monthEnd,   { weekStartsOn: 1, locale });
    
        const getDayStats = (date) => {
            const key   = format(date, "yyyy-MM-dd");
            const dayBk = bookings.filter(
                (b) => (b.table_availability?.date || b.date || "").slice(0, 10) === key
            );
            const tot = dayBk.reduce(
                (n, b) => n + (b.total_adults || 0) + (b.total_kids || 0),
                0
            );
            return { bookings: dayBk.length, clients: tot };
        };
    
        /* colour helpers */
        const isClosed = (d) => {
            const key = format(d, "yyyy-MM-dd");
            if (openSet.has(key)) return false;          // open override
            return closedSet.has(key) ||
                getDayMealTypes(d.getDay()).length === 0;  // schedule-closed
        };
        const isBlocked = (d) => d > addDays(today, bookingWindowDays);
    
        /* build calendar grid -------------------------------------- */
        const rows = [];
        let dayPtr = gridStart;
        while (dayPtr <= gridEnd) {
            const week = [];
            for (let i = 0; i < 7; i++) {
                const d         = dayPtr;
                const { bookings: bc, clients } = getDayStats(d);
                const inMonth   = isSameMonth(d, monthToShow);
                const selected  = selectedDate && isSameDay(d, selectedDate);
    
                /* colour classes */
                let bg  = "bg-white";
                let txt = inMonth ? "text-gray-800" : "text-gray-400";
    
                if (isClosed(d))      { bg = "bg-red-200";    txt = "text-red-800"; }
                else if (isBlocked(d)){ bg = "bg-yellow-100"; txt = "text-yellow-800"; }
                if (selected)         { bg = "bg-blue-600";   txt = "text-white"; }
    
                week.push(
                    <button
                        key={d.toISOString()}
                        onClick={() => onSelectDay(d)}
                        className={`${bg} ${txt} relative p-2 h-24 border border-gray-200 flex flex-col items-center justify-center hover:bg-blue-50 transition`}
                        style={{ minWidth: 50 }}
                        title={format(d, "EEEE, MMMM d, yyyy", { locale })}
                    >
              <span className="text-sm font-semibold">
                {format(d, "d", { locale })}
              </span>
    
                        {bc > 0 && (
                            <span className="text-[10px] mt-1 bg-blue-100 text-blue-600 px-1.5 py-0.5 rounded-full">
                  {bc} {t("calendar.badgeBookings")}
                </span>
                        )}
                        {clients > 0 && (
                            <span className="text-[10px] mt-1 bg-green-100 text-green-700 px-1.5 py-0.5 rounded-full">
                  {clients} {t("calendar.badgeClients")}
                </span>
                        )}
                    </button>
                );
    
                dayPtr = addDays(dayPtr, 1);
            }
            rows.push(<div key={rows.length} className="grid grid-cols-7">{week}</div>);
        }
    
        /* UI -------------------------------------------------------- */
        return (
            <div className="bg-white p-4 rounded shadow">
                {/* month controls */}
                <div className="flex items-center justify-between mb-2">
                    <button
                        onClick={() => jumpMonth(-1)}
                        className="px-2 py-1 bg-gray-200 rounded hover:bg-gray-300"
                    >
                        {t("calendar.prev")}
                    </button>
                    <h3 className="font-semibold">
                        {format(monthToShow, "MMMM yyyy", { locale })}
                    </h3>
                    <button
                        onClick={() => jumpMonth(1)}
                        className="px-2 py-1 bg-gray-200 rounded hover:bg-gray-300"
                    >
                        {t("calendar.next")}
                    </button>
                </div>
    
                {/* weekday headers */}
                <div className="grid grid-cols-7 text-center font-bold text-xs mb-1">
                    {weekdayLabels.map((lbl) => <div key={lbl}>{lbl}</div>)}
                </div>
    
                {rows}
            </div>
        );
    }
    
    BookingsCalendarView.propTypes = {
        month:         PropTypes.instanceOf(Date),
        onMonthChange: PropTypes.func,
        selectedDate:  PropTypes.instanceOf(Date),
        onSelectDay:   PropTypes.func.isRequired,
        bookings:      PropTypes.arrayOf(PropTypes.object).isRequired,
        closedDays:    PropTypes.arrayOf(PropTypes.string),
        openDays:      PropTypes.arrayOf(PropTypes.string),
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/sharedBookings/BookingsChart.jsx
    import React, { useMemo } from "react";
    import PropTypes            from "prop-types";
    import { Bar }              from "react-chartjs-2";
    import {
        Chart as ChartJS,
        BarElement,
        CategoryScale,
        LinearScale,
        Tooltip,
        Legend,
    }                           from "chart.js";
    import { format, addDays }  from "date-fns";
    import { enUS, es as esLocale, ca as caLocale } from "date-fns/locale";
    import { translate, getLanguage } from "../../../services/i18n";
    
    ChartJS.register(BarElement, CategoryScale, LinearScale, Tooltip, Legend);
    
    const localeMap = { en: enUS, es: esLocale, ca: caLocale };
    
    export default function BookingsChart({ bookings, startDate, days }) {
        const lang   = getLanguage();
        const t      = (k, p) => translate(lang, k, p);
        const locale = localeMap[lang] || enUS;
    
        /* ─── aggregate guests per-day ─── */
        const counts = useMemo(() => {
            return bookings.reduce((map, b) => {
                const d = b.table_availability?.date || b.date;
                const g = (b.total_adults || 0) + (b.total_kids || 0);
                map[d]  = (map[d] || 0) + g;
                return map;
            }, {});
        }, [bookings]);
    
        /* ─── build labels + series for the required window ─── */
        const { labels, data } = useMemo(() => {
            const lab = [], dat = [];
            for (let i = 0; i < days; i++) {
                const d   = addDays(startDate, i);
                const key = format(d, "yyyy-MM-dd");
                lab.push(format(d, "MMM d", { locale }));
                dat.push(counts[key] || 0);
            }
            return { labels: lab, data: dat };
        }, [counts, startDate, days, locale]);
    
        const chartData = useMemo(() => ({
            labels,
            datasets: [{
                id:    "guests",
                label: t("chart.totalPeople"),
                data,
                backgroundColor: "#4F46E5",
                borderRadius:    5,
                barPercentage:   0.6,
            }],
        }), [labels, data, t]);
    
        const options = {
            plugins: {
                legend:  { display: false },
                tooltip: {
                    backgroundColor: "rgba(0,0,0,0.7)",
                    titleFont: { size: 14 },
                    bodyFont:  { size: 12 },
                    padding:   10,
                },
            },
            scales: {
                x: { grid: { display: false }, ticks: { color: "#9CA3AF" } },
                y: {
                    beginAtZero: true,
                    grid:  { color: "#E5E7EB" },
                    ticks: { color: "#9CA3AF", stepSize: 1 },
                },
            },
            maintainAspectRatio: false,
        };
    
        return (
            <div className="p-4 bg-white rounded shadow">
                <h3 className="text-lg font-bold mb-4">
                    {t("chart.titleTotalPeople")}
                </h3>
                <div className="w-full" style={{ height: 300 }}>
                    <Bar data={chartData} options={options} />
                </div>
            </div>
        );
    }
    
    BookingsChart.propTypes = {
        bookings:  PropTypes.arrayOf(PropTypes.object).isRequired,
        startDate: PropTypes.instanceOf(Date).isRequired,
        days:      PropTypes.number.isRequired,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/sharedBookings/BookingsCompactView.jsx
    // frontend/src/components/admin/sharedBookings/BookingsCompactView.jsx
    
    import React, { useState, useEffect } from "react";
    import PropTypes from "prop-types";
    import { format, addDays, subDays, isSameDay } from "date-fns";
    import { enUS, es as esLocale, ca as caLocale } from "date-fns/locale";
    import { IconChevronLeft, IconChevronRight } from "@tabler/icons-react";
    import axios from "axios";
    import { getDayMealTypes } from "../../../services/datePicker";
    import { translate, getLanguage } from "../../../services/i18n";
    
    const localeMap = { en: enUS, es: esLocale, ca: caLocale };
    
    /**
     * Compact 7-day strip (future / past).
     */
    export default function BookingsCompactView({
                                                    mode,
                                                    rangeDays,
                                                    offset,
                                                    onOffsetChange,
                                                    selectedDate = null,
                                                    onSelectDay,
                                                    bookings,
                                                    closedDays = [],
                                                }) {
        const lang = getLanguage();
        const t = (k, p) => translate(lang, k, p);
        const locale = localeMap[lang] || enUS;
    
        // dynamic booking window horizon
        const [bookingWindowDays, setBookingWindowDays] = useState(30);
        useEffect(() => {
            axios
                .get("/api/meta/horizon-days")
                .then(({ data }) => {
                    const n = parseInt(data, 10);
                    if (Number.isFinite(n) && n > 0) {
                        setBookingWindowDays(n);
                    }
                })
                .catch(() => {
                    // fallback remains 30
                });
        }, []);
    
        const today = new Date();
        const closedSet = new Set(closedDays);
    
        /* build day list for the current window */
        const days = [];
        if (mode === "future") {
            for (let i = offset; i < offset + rangeDays; i++) {
                days.push(addDays(today, i));
            }
        } else {
            for (let i = 1 + offset; i <= rangeDays + offset; i++) {
                days.push(subDays(today, i));
            }
        }
    
        /* aggregate stats */
        const getDayStats = (day) => {
            const key = format(day, "yyyy-MM-dd");
            const dayBookings = bookings.filter(
                (b) => (b.table_availability?.date || b.date || "").slice(0, 10) === key
            );
            const totalClients = dayBookings.reduce(
                (sum, b) => sum + (b.total_adults || 0) + (b.total_kids || 0),
                0
            );
            return { bookings: dayBookings.length, clients: totalClients };
        };
    
        /* colouring helpers */
        const isClosed = (d) =>
            closedSet.has(format(d, "yyyy-MM-dd")) ||
            getDayMealTypes(d.getDay()).length === 0;
        const isBlocked = (d) => d > addDays(today, bookingWindowDays);
    
        return (
            <div className="relative flex w-full items-center">
                {/* left chevron */}
                <button
                    onClick={() => onOffsetChange(offset - 1)}
                    className="absolute left-0 top-1/2 -translate-y-1/2 w-8 h-8 flex justify-center items-center bg-white shadow rounded-full hover:bg-gray-100 z-10"
                    aria-label={t("calendar.prev")}
                >
                    <IconChevronLeft className="w-5 h-5 text-gray-500" />
                </button>
    
                {/* day buttons container */}
                <div className="flex-1 flex justify-between space-x-4 p-4 bg-white rounded shadow overflow-x-auto">
                    {days.map((day) => {
                        const { bookings: bc, clients } = getDayStats(day);
                        const isSel = selectedDate && isSameDay(day, selectedDate);
    
                        /* colour classes */
                        let bg = "bg-gray-100";
                        let txt = "text-gray-800";
    
                        if (isClosed(day)) {
                            bg = "bg-red-200";
                            txt = "text-red-800";
                        } else if (isBlocked(day)) {
                            bg = "bg-yellow-100";
                            txt = "text-yellow-800";
                        }
                        if (isSel) {
                            bg = "bg-blue-600";
                            txt = "text-white";
                        }
    
                        return (
                            <button
                                key={day.toISOString()}
                                onClick={() => onSelectDay(day)}
                                className={`${bg} ${txt} flex-shrink-0 flex flex-col items-center w-28 py-3 rounded hover:bg-blue-200 transition`}
                                title={format(day, "EEEE, MMMM d, yyyy", { locale })}
                            >
                  <span className="text-xs font-semibold">
                    {format(day, "E", { locale })}
                  </span>
                                <span className="text-2xl font-bold">
                    {format(day, "d", { locale })}
                  </span>
                                <span className="text-sm">{format(day, "MMM", { locale })}</span>
                                <span className="mt-2 text-xs leading-none">
                    {bc} {t("calendar.badgeBookings")}
                  </span>
                                <span className="text-xs leading-none">
                    {clients} {t("calendar.badgeClients")}
                  </span>
                            </button>
                        );
                    })}
                </div>
    
                {/* right chevron */}
                <button
                    onClick={() => onOffsetChange(offset + 1)}
                    className="absolute right-0 top-1/2 -translate-y-1/2 w-8 h-8 flex justify-center items-center bg-white shadow rounded-full hover:bg-gray-100 z-10"
                    aria-label={t("calendar.next")}
                >
                    <IconChevronRight className="w-5 h-5 text-gray-500" />
                </button>
            </div>
        );
    }
    
    BookingsCompactView.propTypes = {
        mode: PropTypes.oneOf(["future", "past"]).isRequired,
        rangeDays: PropTypes.number.isRequired,
        offset: PropTypes.number.isRequired,
        onOffsetChange: PropTypes.func.isRequired,
        selectedDate: PropTypes.instanceOf(Date),
        onSelectDay: PropTypes.func.isRequired,
        bookings: PropTypes.arrayOf(PropTypes.object).isRequired,
        closedDays: PropTypes.arrayOf(PropTypes.string),
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/sharedBookings/BookingsOverview.jsx
    import React, { useState, useEffect, useMemo } from "react";
    import PropTypes from "prop-types";
    import {
        format,
        addDays,
        subDays,
        parseISO,
        startOfMonth,
        endOfMonth,
        startOfDay,
        differenceInCalendarDays,
    } from "date-fns";
    
    import { fetchTableAvailabilityRange } from "../../../services/bookingService";
    import BookingsCompactView  from "./BookingsCompactView";
    import BookingsCalendarView from "./BookingsCalendarView";
    import BookingsChart        from "./BookingsChart";
    import DaySchedule          from "./DaySchedule";
    import AddBookingModal      from "../currentBookings/AddBookingModal";
    import { translate, getLanguage } from "../../../services/i18n";
    
    /* helper – stable “YYYY-MM-DD” */
    const ymd = (d) => format(d, "yyyy-MM-dd");
    
    /* ────────────────────────────────────────────────
       Segmented-control style toggle
       ────────────────────────────────────────────────*/
    function ViewToggle({ value, onChange }) {
        const t = (k,p) => translate(getLanguage(), k, p);
        const opts = [
            { key: "compact",  label: t("admin.compact")  },
            { key: "calendar", label: t("admin.calendar") },
        ];
        return (
            <div className="inline-flex bg-gray-100 rounded-full p-1 shadow-inner">
                {opts.map(({ key, label }) => (
                    <button
                        key={key}
                        onClick={() => onChange(key)}
                        className={`px-4 py-1 text-sm font-medium rounded-full transition
                ${value===key
                            ? "bg-gradient-to-r from-blue-500 to-indigo-500 text-white shadow"
                            : "text-gray-600 hover:text-gray-800"}`}
                    >
                        {label}
                    </button>
                ))}
            </div>
        );
    }
    ViewToggle.propTypes = { value: PropTypes.string.isRequired, onChange: PropTypes.func.isRequired };
    
    export default function BookingsOverview({
                                                 mode,
                                                 bookings,
                                                 showChart      = true,
                                                 allowDrill     = true,
                                                 view: controlledView,
                                                 hideViewToggle = false,
                                                 onViewChange   = () => {},
                                                 onWindowChange = () => {},
                                                 customTitle    = null,
                                             }) {
        /* i18n */
        const t = (k,v) => translate(getLanguage(), k, v);
    
        /* constants */
        const rangeDays = 7;
        const today     = useMemo(() => startOfDay(new Date()), []);
    
        /* ─────── view / window state ─────── */
        const [viewState, setViewState] = useState("compact");
        const view = controlledView ?? viewState;
        const changeView = (v) => {
            if (controlledView !== undefined) onViewChange(v);
            else setViewState(v);
        };
    
        /* compact offset (days); calendar uses month instead */
        const [offset, setOffset] = useState(0);
    
        /* month being shown in calendar view (1st of month) */
        const [calMonth, setCalMonth] = useState(startOfMonth(today));
    
        /* day selected for drill-down */
        const [selDay, setSelDay] = useState(null);
    
        /* table-availability cache */
        const [ta, setTA]       = useState({});
        const [loadingTA, setL] = useState(false);
    
        /* CLOSED-days list */
        const [closedDays, setClosedDays] = useState([]);
        useEffect(() => {
            fetch("/api/closed-days")
                .then((r) => r.json())
                .then((arr) => Array.isArray(arr) && setClosedDays(arr))
                .catch(() => setClosedDays([]));
        }, []);
    
        /* ─────── derive window boundaries ─────── */
        const compactStart = useMemo(
            () => mode==="future"
                ? addDays(today, offset)
                : subDays(today, rangeDays + offset),
            [mode, today, offset]
        );
        const compactEnd   = useMemo(
            () => mode==="future"
                ? addDays(compactStart, rangeDays-1)
                : subDays(today, 1+offset),
            [mode, compactStart, today, offset]
        );
    
        const viewWinStart = useMemo(
            () => view==="calendar" ? calMonth : compactStart,
            [view, calMonth, compactStart]
        );
        const viewWinEnd   = useMemo(
            () => view==="calendar" ? endOfMonth(calMonth) : compactEnd,
            [view, calMonth, compactEnd]
        );
    
        /* slices for current window --------------------------------- */
        const compactFiltered = useMemo(
            () => bookings.filter((b) => {
                const d = parseISO(b.table_availability?.date || b.date);
                return d >= compactStart && d <= compactEnd;
            }),
            [bookings, compactStart, compactEnd]
        );
    
        const calendarBookings = useMemo(
            () => bookings.filter((b) => {
                const d = parseISO(b.table_availability?.date || b.date);
                return mode==="future" ? d >= today : d < today;
            }),
            [bookings, mode, today]
        );
    
        const statsBookings = useMemo(
            () => view==="calendar"
                ? calendarBookings.filter((b) => {
                    const d = parseISO(b.table_availability?.date || b.date);
                    return d >= viewWinStart && d <= viewWinEnd;
                })
                : compactFiltered,
            [view, calendarBookings, compactFiltered, viewWinStart, viewWinEnd]
        );
    
        useEffect(() => { onWindowChange(statsBookings); }, [statsBookings]);
    
        /* KPI counters */
        const totalBookings = statsBookings.length;
        const totalClients  = statsBookings.reduce(
            (s,b) => s + (b.total_adults||0) + (b.total_kids||0), 0
        );
    
        /* ─────── table-availability fetch ─────── */
        const winStartStr = ymd(viewWinStart);
        const winEndStr   = ymd(viewWinEnd);
    
        useEffect(() => {
            let cancelled = false;
            setL(true);
            Promise.all([
                fetchTableAvailabilityRange(winStartStr, winEndStr, "lunch"),
                fetchTableAvailabilityRange(winStartStr, winEndStr, "dinner"),
            ])
                .then(([lunch, dinner]) => {
                    if (cancelled) return;
                    const merged = {};
                    [lunch, dinner].forEach((src) =>
                        Object.entries(src).forEach(([d, info]) => {
                            merged[d] = merged[d] ? { ...merged[d], ...info } : info;
                        })
                    );
                    setTA(merged);
                })
                .catch(() => !cancelled && setTA({}))
                .finally(() => !cancelled && setL(false));
            return () => { cancelled = true; };
        }, [winStartStr, winEndStr, view]);
    
        /* manual-add */
        const [showModal, setShowModal] = useState(false);
        const handleSaved = () => { setShowModal(false); window.location.reload(); };
    
        /* ─────── chart start / length ─────── */
        const chartStart = view === "calendar" ? viewWinStart : compactStart;
        const chartDays  = view === "calendar"
            ? differenceInCalendarDays(viewWinEnd, viewWinStart) + 1
            : rangeDays;
    
        /* ─────── UI ─────── */
        return (
            <div className="p-6 bg-white rounded shadow space-y-6">
                {/* header */}
                <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                    <div>
                        <h2 className="text-2xl font-bold capitalize">
                            {customTitle || t(`overview.${mode}Bookings`)}
                        </h2>
                        <p className="text-sm text-gray-500">
                            {t("overview.dataWindow", { start: ymd(viewWinStart), end: ymd(viewWinEnd) })}
                        </p>
                    </div>
                    {!hideViewToggle && <ViewToggle value={view} onChange={changeView} />}
                </div>
    
                {/* KPI cards */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="bg-blue-50 p-3 rounded text-center">
                        <p className="text-xs text-gray-600">{t("overview.bookings")}</p>
                        <p className="text-xl font-bold">{totalBookings}</p>
                    </div>
                    <div className="bg-green-50 p-3 rounded text-center">
                        <p className="text-xs text-gray-600">{t("overview.guests")}</p>
                        <p className="text-xl font-bold">{totalClients}</p>
                    </div>
                </div>
    
                {/* main view */}
                {view === "compact" ? (
                    <BookingsCompactView
                        mode={mode}
                        rangeDays={rangeDays}
                        offset={offset}
                        onOffsetChange={setOffset}
                        selectedDate={allowDrill ? selDay : null}
                        onSelectDay={allowDrill ? setSelDay : () => {}}
                        bookings={statsBookings}
                        closedDays={closedDays}
                    />
                ) : (
                    <BookingsCalendarView
                        month={calMonth}
                        onMonthChange={(m) => setCalMonth(startOfMonth(m))}
                        selectedDate={allowDrill ? selDay : null}
                        onSelectDay={allowDrill ? setSelDay : () => {}}
                        bookings={calendarBookings}
                        closedDays={closedDays}
                    />
                )}
    
                {/* chart */}
                {showChart && (
                    <BookingsChart
                        key={`${mode}-${offset}-${view}-${chartStart.toISOString()}`}
                        bookings={statsBookings}
                        startDate={chartStart}
                        days={chartDays}
                    />
                )}
    
                {/* drill-down schedule */}
                {allowDrill && selDay && (
                    <div className="mt-4 relative">
                        {mode === "future" && (
                            <button
                                onClick={() => setShowModal(true)}
                                className="absolute right-0 -top-10 px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700"
                            >
                                {t("admin.manualBooking")}
                            </button>
                        )}
                        <DaySchedule
                            selectedDate={selDay}
                            bookings={bookings}
                            tableAvailability={ta}
                            onClose={() => setSelDay(null)}
                            enableZoom
                        />
                    </div>
                )}
    
                {/* manual-add modal */}
                {allowDrill && showModal && selDay && (
                    <AddBookingModal
                        dateObj={selDay}
                        onClose={() => setShowModal(false)}
                        onSaved={handleSaved}
                    />
                )}
            </div>
        );
    }
    
    BookingsOverview.propTypes = {
        mode:            PropTypes.oneOf(["future","past"]).isRequired,
        bookings:        PropTypes.arrayOf(PropTypes.object).isRequired,
        showChart:       PropTypes.bool,
        allowDrill:      PropTypes.bool,
        view:            PropTypes.oneOf(["compact","calendar"]),
        hideViewToggle:  PropTypes.bool,
        onViewChange:    PropTypes.func,
        onWindowChange:  PropTypes.func,
        customTitle:     PropTypes.string,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/sharedBookings/DaySchedule.jsx
    // frontend/src/components/admin/sharedBookings/DaySchedule.jsx
    import React, { useState } from "react";
    import PropTypes from "prop-types";
    import { format } from "date-fns";
    import { enUS, es as esLocale, ca as caLocale } from "date-fns/locale";
    import TableUsage from "./TableUsage";
    import { translate, getLanguage } from "../../../services/i18n";
    
    const localeMap = { en: enUS, es: esLocale, ca: caLocale };
    const getBookingDate = (b) =>
        (b.table_availability?.date || b.date || "").slice(0, 10);
    
    export default function DaySchedule({
                                            selectedDate,
                                            bookings,
                                            tableAvailability,
                                            onClose,
                                            enableZoom = false,
                                        }) {
        const lang   = getLanguage();
        const t      = (k, p) => translate(lang, k, p);
        const locale = localeMap[lang] || enUS;
    
        const [showFloor, setShowFloor] = useState(false);
        if (!selectedDate) return null;
    
        const dateStr   = format(selectedDate, "yyyy-MM-dd");
        const dayInfo   = tableAvailability[dateStr];
        const indicator = typeof dayInfo === "string" ? dayInfo : null; // "closed" | "blocked"
        const dayObj    = indicator ? {} : (dayInfo || {});
    
        /* fixed round keys so we can still show bookings on closed / blocked days */
        const roundKeys = ["first_round", "second_round", "dinner_round"];
    
        const roundBookings = {};
        roundKeys.forEach((rk) => {
            roundBookings[rk] = bookings
                .filter((b) => {
                    if (getBookingDate(b) !== dateStr) return false;
                    if (rk.includes("first"))  return b.reserved_time < "15:00:00";
                    if (rk.includes("second")) return b.reserved_time >= "15:00:00" && b.reserved_time < "20:00:00";
                    return b.reserved_time >= "20:00:00";
                })
                .sort((a, b) => a.reserved_time.localeCompare(b.reserved_time));
        });
    
        const fullStock = { 2: 0, 4: 0, 6: 0 };
        roundKeys.forEach((rk) => {
            const avail = dayObj[rk]?.availability || {};
            const bookedCounts = {};
            roundBookings[rk].forEach((bk) => {
                const cap = bk.table_availability?.capacity || 0;
                bookedCounts[cap] = (bookedCounts[cap] || 0) + 1;
            });
            [2, 4, 6].forEach((cap) => {
                const totalHere = (avail[cap] || 0) + (bookedCounts[cap] || 0);
                fullStock[cap] = Math.max(fullStock[cap], totalHere);
            });
        });
    
        const prettyRound = (key) => {
            if (key.includes("first"))
                return { lbl: t("schedule.round.lunchFirst"), bg: "bg-green-50" };
            if (key.includes("second"))
                return { lbl: t("schedule.round.lunchSecond"), bg: "bg-orange-50" };
            return { lbl: t("schedule.round.dinner"), bg: "bg-purple-50" };
        };
    
        return (
            <div className="mt-6 border rounded bg-white p-4 shadow">
                <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-bold">
                        {t("schedule.header", {
                            date: format(selectedDate, "EEEE, MMMM d, yyyy", { locale }),
                        })}
                    </h3>
                    <div className="space-x-3">
                        {enableZoom && (
                            <button
                                onClick={() => setShowFloor((v) => !v)}
                                className="text-sm px-2 py-1 border rounded hover:bg-gray-100"
                            >
                                {showFloor ? t("admin.hideFloor") : t("admin.expandFloor")}
                            </button>
                        )}
                        <button
                            onClick={onClose}
                            className="text-sm text-red-500 underline hover:text-red-700"
                        >
                            {t("admin.close")}
                        </button>
                    </div>
                </div>
    
                {indicator && (
                    <p
                        className={
                            indicator === "closed"
                                ? "text-red-600 font-semibold mb-4"
                                : "text-yellow-600 font-semibold mb-4"
                        }
                    >
                        {indicator.toUpperCase()}
                    </p>
                )}
    
                {roundKeys.map((rk) => {
                    const { lbl, bg } = prettyRound(rk);
                    const rows        = roundBookings[rk] || [];
    
                    return (
                        <div key={rk} className="mb-8">
                            <h4 className="text-md font-semibold mb-2">{lbl}</h4>
    
                            {rows.length > 0 ? (
                                <table className="min-w-full divide-y divide-gray-200 text-sm mb-3">
                                    <thead>
                                    <tr className="bg-gray-50">
                                        <th className="px-3 py-2 text-left font-semibold">
                                            {t("schedule.table.time")}
                                        </th>
                                        <th className="px-3 py-2 text-left font-semibold">
                                            {t("schedule.table.name")}
                                        </th>
                                        <th className="px-3 py-2 text-left font-semibold">
                                            {t("schedule.table.totalClients")}
                                        </th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    {rows.map((bk) => (
                                        <tr key={bk.id} className={`${bg} hover:bg-yellow-50 transition`}>
                                            <td className="px-3 py-2">{bk.reserved_time.slice(0, 5)}</td>
                                            <td className="px-3 py-2 truncate max-w-[160px]">{bk.full_name}</td>
                                            <td className="px-3 py-2">
                                                {bk.total_adults + bk.total_kids}
                                            </td>
                                        </tr>
                                    ))}
                                    </tbody>
                                </table>
                            ) : (
                                <p className="text-gray-500 mb-3">{t("schedule.noBookings")}</p>
                            )}
    
                            {showFloor && (
                                <TableUsage capacityTotals={fullStock} bookings={rows} expanded />
                            )}
                        </div>
                    );
                })}
            </div>
        );
    }
    
    DaySchedule.propTypes = {
        selectedDate:      PropTypes.instanceOf(Date),
        bookings:          PropTypes.arrayOf(PropTypes.object).isRequired,
        tableAvailability: PropTypes.object.isRequired,
        onClose:           PropTypes.func.isRequired,
        enableZoom:        PropTypes.bool,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/sharedBookings/TableUsage.jsx
    // frontend/src/components/admin/sharedBookings/TableUsage.jsx
    import React from "react";
    import PropTypes from "prop-types";
    import { translate, getLanguage } from "../../../services/i18n";
    
    export default function TableUsage({
                                           capacityTotals = {},
                                           bookings = [],
                                           expanded = false,
                                           seatSize = 35,
                                       }) {
        const lang = getLanguage();
        const t    = (k, p) => translate(lang, k, p);
    
        /* capacities list */
        const capacities = Object.keys(capacityTotals)
            .map(Number)
            .filter((c) => !isNaN(c))
            .sort((a, b) => a - b);
    
        /* flat table array */
        const tables = [];
        capacities.forEach((cap) => {
            for (let i = 0; i < (capacityTotals[cap] || 0); i++) {
                tables.push({ cap, booked: false });
            }
        });
    
        /* mark booked */
        const freePtr = {};
        capacities.forEach((cap) => (freePtr[cap] = 0));
    
        bookings.forEach((bk) => {
            const cap = bk.table_availability?.capacity || 0;
            let idx = -1,
                seen = 0;
            for (let i = 0; i < tables.length; i++) {
                if (tables[i].cap === cap) {
                    if (seen === freePtr[cap]) {
                        idx = i;
                        break;
                    }
                    seen++;
                }
            }
            if (idx !== -1) {
                tables[idx] = {
                    cap,
                    booked: true,
                    name: bk.full_name,
                    guests: (bk.total_adults || 0) + (bk.total_kids || 0),
                };
            }
            freePtr[cap]++;
        });
    
        /* ui helpers */
        const scale   = expanded ? 1.6 : 1;
        const sizePx  = (cap) => cap * seatSize * scale;
        const bgClass = (t) => (t.booked ? "bg-green-300" : "bg-gray-200");
    
        return (
            <div className="mt-3">
                <p className="text-sm font-semibold mb-1">{t("tableUsage")}</p>
                <div className="flex flex-wrap gap-3">
                    {tables.map((t, i) => (
                        <div
                            key={i}
                            className={`relative flex flex-col items-center justify-center border rounded-2xl shadow-sm ${bgClass(
                                t
                            )}`}
                            style={{
                                width:  sizePx(t.cap),
                                height: sizePx(t.cap) * 0.75,
                            }}
                            title={t.booked ? `${t.name} (${t.guests})` : `${t.cap}-top`}
                        >
                            {t.booked ? (
                                <>
                    <span className="text-xs font-semibold truncate px-1 max-w-[90%]">
                      {t.name}
                    </span>
                                    <span className="text-xs">
                      {t.guests}/{t.cap}
                    </span>
                                </>
                            ) : (
                                <span className="text-xs text-gray-600">{t.cap}</span>
                            )}
                        </div>
                    ))}
                </div>
            </div>
        );
    }
    
    TableUsage.propTypes = {
        capacityTotals: PropTypes.objectOf(PropTypes.number),
        bookings:       PropTypes.array,
        expanded:       PropTypes.bool,
        seatSize:       PropTypes.number,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/admin/utils/LanguagePicker.jsx
    // frontend/src/components/admin/utils/LanguagePicker.jsx
    
    import { useState, Fragment } from "react";
    import { Listbox, Transition } from "@headlessui/react";
    import { ChevronDownIcon } from "@heroicons/react/20/solid";
    
    const options = [
        { label: "Català",   code: "ca" },
        { label: "Español",  code: "es" },
        { label: "English",  code: "en" },
    ];
    
    export default function LanguagePicker({ onChange, selectedCode }) {
        const initial = options.find((opt) => opt.code === selectedCode) || options[0];
        const [selected, setSelected] = useState(initial);
    
        const handleChange = (opt) => {
            setSelected(opt);
            onChange(opt.code);
        };
    
        return (
            <div className="w-48 relative">
                <Listbox value={selected} onChange={handleChange}>
                    <div className="relative">
                        <Listbox.Button className="w-full bg-white border border-gray-300 rounded-md px-3 py-2 flex items-center justify-between text-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <span>{selected.label}</span>
                            <ChevronDownIcon className="w-4 h-4 text-gray-500" aria-hidden="true" />
                        </Listbox.Button>
    
                        <Transition
                            as={Fragment}
                            leave="transition ease-in duration-100"
                            leaveFrom="opacity-100"
                            leaveTo="opacity-0"
                        >
                            <Listbox.Options className="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none">
                                {options.map((opt) => (
                                    <Listbox.Option
                                        key={opt.code}
                                        value={opt}
                                        className={({ active }) =>
                                            `cursor-pointer select-none relative px-3 py-2 text-sm ${
                                                active ? "bg-indigo-100 text-indigo-900" : "text-gray-700"
                                            }`
                                        }
                                    >
                                        {({ selected: isSel }) => (
                                            <span className={`${isSel ? "font-semibold" : "font-normal"}`}>
                          {opt.label}
                        </span>
                                        )}
                                    </Listbox.Option>
                                ))}
                            </Listbox.Options>
                        </Transition>
                    </div>
                </Listbox>
            </div>
        );
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/bookingWizard/BookingWizard.jsx
    // frontend/src/components/bookingWizard/BookingWizard.jsx
    import React, { useState, useEffect } from "react";
    import { format } from "date-fns";
    import {
        fetchAvailableTimeSlots,
        createBooking,
    } from "../../services/bookingService";
    import AnimatedBackground from "../layout/AnimatedBackground.jsx";
    import ReservationDetailsStep from "./steps/ReservationDetailsStep";
    import TimeSlotStep from "./steps/TimeSlotStep";
    import ContactInfoStep from "./steps/ContactInfoStep";
    
    export default function BookingWizard() {
        const [step, setStep] = useState(1);
    
        /* ─── reservation details ─── */
        const [adults, setAdults] = useState(2);
        const [kids, setKids] = useState(0);
        const [date, setDate] = useState(new Date());
        const [meal, setMeal] = useState("lunch");
        const [longStay, setLongStay] = useState(false);
    
        /* ─── slot search ─── */
        const [slotData, setSlotData] = useState(null);
        const [round, setRound] = useState("");
        const [time, setTime] = useState(null);
        const [loadingSlots, setLoadingSlots] = useState(false);
    
        /* ─── contact & finalise ─── */
        const [fullName, setFullName] = useState("");
        const [phonePref, setPhonePref] = useState("+34");
        const [phoneNum, setPhoneNum] = useState("");
        const [email, setEmail] = useState("");
        const [requests, setRequests] = useState("");
        const [gdpr, setGdpr] = useState(false);
        const [marketing, setMarketing] = useState(false);
    
        /* ─── UI state ─── */
        const [error, setError] = useState("");
        const [saving, setSaving] = useState(false);   // ★ new
        const [success, setSuccess] = useState(false);
    
        /* ─────────────────────────────────────────────
           fetch available slots whenever we ENTER step 2
           ───────────────────────────────────────────── */
        useEffect(() => {
            if (step !== 2) return;
            (async () => {
                try {
                    setLoadingSlots(true);
                    const data = await fetchAvailableTimeSlots({
                        date: format(date, "yyyy-MM-dd"),
                        mealType: meal,
                    });
                    setSlotData(data);
                } catch {
                    setSlotData(null);
                } finally {
                    setLoadingSlots(false);
                }
            })();
        }, [step, date, meal]);
    
        const next  = () => setStep((s) => s + 1);
        const back  = () => setStep((s) => s - 1);
        const reset = () => window.location.reload();
    
        /* ─── finalise ─── */
        const save = async () => {
            if (saving) return;             // double-click guard
            setError("");
    
            if (!fullName.trim() || !email.trim() || !gdpr) {
                return setError("Name, e-mail and GDPR consent are required.");
            }
            if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
                return setError("Invalid e-mail.");
            }
    
            setSaving(true);                // ★ spinner on
            try {
                await createBooking({
                    date:          format(date, "yyyy-MM-dd"),
                    meal_type:     meal,
                    reserved_time: time,
                    total_adults:  adults,
                    total_kids:    kids,
                    full_name:     fullName,
                    phone:         phoneNum ? `${phonePref} ${phoneNum}` : null,
                    email,
                    special_requests: requests,
                    gdpr_consent:     gdpr,
                    marketing_opt_in: marketing,
                    long_stay:        longStay,
                });
                setSuccess(true);
                setTimeout(reset, 2000);
            } catch (e) {
                setError(e.response?.data?.error || "Booking failed.");
            } finally {
                setSaving(false);           // ★ spinner off
            }
        };
    
        return (
            <div className="relative min-h-screen">
                <AnimatedBackground />
    
                <div className="relative flex items-center justify-center p-4">
                    <div className="relative bg-white p-8 rounded-lg shadow-lg w-full max-w-md">
    
                        {/* step indicators */}
                        <div className="flex justify-center space-x-2 mb-6">
                            {[1, 2, 3].map((i) => (
                                <div
                                    key={i}
                                    className={`w-8 h-8 rounded-full flex items-center justify-center ${
                                        step === i ? "bg-blue-600 text-white" : "bg-gray-200"
                                    }`}
                                >
                                    {i}
                                </div>
                            ))}
                        </div>
    
                        {/* step 1 */}
                        {step === 1 && (
                            <ReservationDetailsStep
                                adults={adults}
                                kids={kids}
                                onIncrementAdults={() => setAdults((v) => Math.min(v + 1, 20))}
                                onDecrementAdults={() => setAdults((v) => Math.max(v - 1, 1))}
                                onIncrementKids={() => setKids((v) => Math.min(v + 1, 20))}
                                onDecrementKids={() => setKids((v) => Math.max(v - 1, 0))}
                                date={date}
                                onDateSelect={setDate}
                                mealType={meal}
                                onSetMealType={setMeal}
                                error={error}
                                onContinue={() => {
                                    setError("");
                                    if (!date) return setError("Pick a date first.");
                                    next();
                                }}
                                onClose={reset}
                            />
                        )}
    
                        {/* step 2 */}
                        {step === 2 && (
                            <TimeSlotStep
                                mealType={meal}
                                date={date}
                                timeSlotData={slotData}
                                selectedRound={round}
                                onSelectRound={setRound}
                                isLoading={loadingSlots}
                                error={error}
                                onBack={back}
                                onContinue={(t) => {
                                    setTime(t);
                                    next();
                                }}
                            />
                        )}
    
                        {/* step 3 */}
                        {step === 3 && (
                            <ContactInfoStep
                                fullName={fullName}
                                phonePrefix={phonePref}
                                phoneNumber={phoneNum}
                                email={email}
                                specialRequests={requests}
                                gdprConsent={gdpr}
                                marketingOptIn={marketing}
                                longStay={longStay}
                                onChangeFullName={setFullName}
                                onChangePhonePrefix={setPhonePref}
                                onChangePhoneNumber={setPhoneNum}
                                onChangeEmail={setEmail}
                                onChangeSpecialRequests={setRequests}
                                onToggleGdpr={setGdpr}
                                onToggleMarketing={setMarketing}
                                onToggleLongStay={setLongStay}
                                adults={adults}
                                kids={kids}
                                selectedRound={round}
                                date={date}
                                error={error}
                                confirmationMessage=""
                                onBack={back}
                                onConfirmBooking={save}
                            />
                        )}
    
                        {/* ★ thinking spinner overlay */}
                        {saving && (
                            <div className="absolute inset-0 bg-black/60 flex items-center justify-center z-20">
                                <div className="w-12 h-12 border-4 border-blue-500 border-dashed rounded-full animate-spin" />
                            </div>
                        )}
    
                        {/* confirmation overlay */}
                        {success && (
                            <div className="absolute inset-0 bg-black/60 flex items-center justify-center z-30">
                                <div className="bg-white p-6 rounded shadow-lg">
                                    <p className="text-lg font-bold mb-2">Booking confirmed 🎉</p>
                                    <p>Returning…</p>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        );
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/bookingWizard/steps/ContactInfoStep.jsx
    import React from "react";
    import PropTypes from "prop-types";
    
    export default function ContactInfoStep({
                                                fullName,
                                                phonePrefix,
                                                phoneNumber,
                                                email,
                                                specialRequests,
                                                gdprConsent,
                                                marketingOptIn,
                                                longStay,
                                                onChangeFullName,
                                                onChangePhonePrefix,
                                                onChangePhoneNumber,
                                                onChangeEmail,
                                                onChangeSpecialRequests,
                                                onToggleGdpr,
                                                onToggleMarketing,
                                                onToggleLongStay,
                                                adults,
                                                kids,
                                                selectedRound,
                                                date,
                                                error,
                                                confirmationMessage,
                                                onBack,
                                                onConfirmBooking,
                                            }) {
        return (
            <div>
                <h2 className="text-2xl font-semibold mb-6 text-center">
                    Your Details
                </h2>
    
                {/* Full Name */}
                <div className="mb-4">
                    <label className="block mb-1 font-medium">Full Name*</label>
                    <input
                        className="w-full border rounded p-2"
                        value={fullName}
                        onChange={(e) => onChangeFullName(e.target.value)}
                    />
                </div>
    
                {/* Phone */}
                <div className="mb-4">
                    <label className="block mb-1 font-medium">Phone (optional)</label>
                    <div className="flex space-x-2">
                        <select
                            className="border rounded p-2"
                            value={phonePrefix}
                            onChange={(e) => onChangePhonePrefix(e.target.value)}
                        >
                            <option value="+34">+34</option>
                            <option value="+33">+33</option>
                            <option value="+44">+44</option>
                        </select>
                        <input
                            className="w-full border rounded p-2"
                            value={phoneNumber}
                            onChange={(e) => onChangePhoneNumber(e.target.value)}
                            placeholder="620 379 850"
                        />
                    </div>
                </div>
    
                {/* Email */}
                <div className="mb-4">
                    <label className="block mb-1 font-medium">Email*</label>
                    <input
                        className="w-full border rounded p-2"
                        type="email"
                        value={email}
                        onChange={(e) => onChangeEmail(e.target.value)}
                    />
                </div>
    
                {/* Long‑stay */}
                <div className="mb-4 flex items-center">
                    <input
                        type="checkbox"
                        checked={longStay}
                        onChange={(e) => onToggleLongStay(e.target.checked)}
                        className="mr-2"
                    />
                    <label className="text-sm">
                        Extended stay (birthday / celebration)
                    </label>
                </div>
    
                {/* Special Requests */}
                <div className="mb-4">
                    <label className="block mb-1 font-medium">Special Requests</label>
                    <textarea
                        className="w-full border rounded p-2"
                        rows="3"
                        value={specialRequests}
                        onChange={(e) => onChangeSpecialRequests(e.target.value)}
                    />
                </div>
    
                {/* GDPR */}
                <div className="mb-4 flex items-center">
                    <input
                        type="checkbox"
                        checked={gdprConsent}
                        onChange={(e) => onToggleGdpr(e.target.checked)}
                        className="mr-2"
                    />
                    <label className="text-sm">I consent to data processing (GDPR)*</label>
                </div>
    
                {/* Marketing */}
                <div className="mb-6 flex items-center">
                    <input
                        type="checkbox"
                        checked={marketingOptIn}
                        onChange={(e) => onToggleMarketing(e.target.checked)}
                        className="mr-2"
                    />
                    <label className="text-sm">Send me occasional offers</label>
                </div>
    
                {/* Summary */}
                <div className="mb-4 text-gray-700">
                    {adults} adult{adults!==1 && "s"}, {kids} kid{kids!==1 && "s"} –
                    {selectedRound.replace("_"," ")} on {date.toLocaleDateString()}
                </div>
    
                {error && <p className="text-red-600 mb-3">{error}</p>}
                {confirmationMessage && (
                    <p className="text-green-600 mb-3">{confirmationMessage}</p>
                )}
    
                <div className="flex justify-between">
                    <button onClick={onBack} className="px-4 py-2 border rounded">
                        Back
                    </button>
                    <button
                        onClick={onConfirmBooking}
                        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                    >
                        Finalise Booking
                    </button>
                </div>
            </div>
        );
    }
    
    ContactInfoStep.propTypes = {
        fullName:             PropTypes.string.isRequired,
        phonePrefix:          PropTypes.string.isRequired,
        phoneNumber:          PropTypes.string.isRequired,
        email:                PropTypes.string.isRequired,
        specialRequests:      PropTypes.string,
        gdprConsent:          PropTypes.bool.isRequired,
        marketingOptIn:       PropTypes.bool.isRequired,
        longStay:             PropTypes.bool.isRequired,
        onChangeFullName:     PropTypes.func.isRequired,
        onChangePhonePrefix:  PropTypes.func.isRequired,
        onChangePhoneNumber:  PropTypes.func.isRequired,
        onChangeEmail:        PropTypes.func.isRequired,
        onChangeSpecialRequests: PropTypes.func.isRequired,
        onToggleGdpr:         PropTypes.func.isRequired,
        onToggleMarketing:    PropTypes.func.isRequired,
        onToggleLongStay:     PropTypes.func.isRequired,
        adults:               PropTypes.number.isRequired,
        kids:                 PropTypes.number.isRequired,
        selectedRound:        PropTypes.string.isRequired,
        date:                 PropTypes.instanceOf(Date).isRequired,
        error:                PropTypes.string,
        confirmationMessage:  PropTypes.string,
        onBack:               PropTypes.func.isRequired,
        onConfirmBooking:     PropTypes.func.isRequired,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/bookingWizard/steps/ReservationDetailsStep.jsx
    import React from "react";
    import PropTypes from "prop-types";
    import DatePicker from "../../datePicker/DatePicker.jsx";
    import { getDayMealTypes } from "../../../services/datePicker.js";
    
    function mealInfo(mealType) {
        return mealType === "lunch"
            ? { label: "Comida", window: "(13:00–17:30)" }
            : { label: "Cena",   window: "(20:00–23:30)" };
    }
    
    export default function ReservationDetailsStep({
                                                       adults,
                                                       kids,
                                                       onIncrementAdults,
                                                       onDecrementAdults,
                                                       onIncrementKids,
                                                       onDecrementKids,
                                                       date,
                                                       onDateSelect,
                                                       mealType,
                                                       onSetMealType,
                                                       error,
                                                       onContinue,
                                                       onClose,
                                                   }) {
        const availableMeals = date ? getDayMealTypes(date.getDay()) : [];
        const lunch  = mealInfo("lunch");
        const dinner = mealInfo("dinner");
    
        return (
            <div>
                <h2 className="text-2xl font-semibold mb-6 text-center">
                    Choose Your Reservation
                </h2>
    
                {/* Adults */}
                <div className="mb-4">
                    <p className="font-medium mb-2">Adults</p>
                    <div className="flex items-center">
                        <button onClick={onDecrementAdults} className="bg-gray-200 px-3 py-1 rounded-l">
                            –
                        </button>
                        <div className="px-4 py-1 border-t border-b">{adults}</div>
                        <button onClick={onIncrementAdults} className="bg-gray-200 px-3 py-1 rounded-r">
                            +
                        </button>
                    </div>
                </div>
    
                {/* Kids */}
                <div className="mb-6">
                    <p className="font-medium mb-2">Kids</p>
                    <div className="flex items-center">
                        <button onClick={onDecrementKids} className="bg-gray-200 px-3 py-1 rounded-l">
                            –
                        </button>
                        <div className="px-4 py-1 border-t border-b">{kids}</div>
                        <button onClick={onIncrementKids} className="bg-gray-200 px-3 py-1 rounded-r">
                            +
                        </button>
                    </div>
                </div>
    
                {/* Date */}
                <div className="mb-6">
                    <p className="font-medium mb-2">Select Date</p>
                    <DatePicker selectedDate={date} onDateSelect={onDateSelect} />
                </div>
    
                {/* Meal Type */}
                <div className="mb-6">
                    <p className="font-medium mb-2">Meal Type</p>
                    <div className="flex space-x-3">
                        {availableMeals.includes("lunch") && (
                            <button
                                onClick={() => onSetMealType("lunch")}
                                className={`flex-1 px-4 py-2 rounded border text-center ${
                                    mealType === "lunch" ? "bg-blue-600 text-white" : "bg-gray-100"
                                }`}
                            >
                                {lunch.label}
                                <br />
                                <span className="text-xs">{lunch.window}</span>
                            </button>
                        )}
                        {availableMeals.includes("dinner") && (
                            <button
                                onClick={() => onSetMealType("dinner")}
                                className={`flex-1 px-4 py-2 rounded border text-center ${
                                    mealType === "dinner" ? "bg-blue-600 text-white" : "bg-gray-100"
                                }`}
                            >
                                {dinner.label}
                                <br />
                                <span className="text-xs">{dinner.window}</span>
                            </button>
                        )}
                    </div>
                </div>
    
                {error && <p className="text-red-500 mb-4">{error}</p>}
    
                <div className="flex justify-between">
                    <button onClick={onClose} className="px-4 py-2 border rounded">
                        Close
                    </button>
                    <button
                        onClick={onContinue}
                        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                    >
                        Continue
                    </button>
                </div>
            </div>
        );
    }
    
    ReservationDetailsStep.propTypes = {
        adults:              PropTypes.number.isRequired,
        kids:                PropTypes.number.isRequired,
        onIncrementAdults:   PropTypes.func.isRequired,
        onDecrementAdults:   PropTypes.func.isRequired,
        onIncrementKids:     PropTypes.func.isRequired,
        onDecrementKids:     PropTypes.func.isRequired,
        date:                PropTypes.instanceOf(Date).isRequired,
        onDateSelect:        PropTypes.func.isRequired,
        mealType:            PropTypes.oneOf(["lunch","dinner"]).isRequired,
        onSetMealType:       PropTypes.func.isRequired,
        error:               PropTypes.string,
        onContinue:          PropTypes.func.isRequired,
        onClose:             PropTypes.func.isRequired,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/bookingWizard/steps/TimeSlotStep.jsx
    import React, { useState, useEffect } from "react";
    import PropTypes from "prop-types";
    
    export default function TimeSlotStep({
                                             mealType,
                                             date,
                                             timeSlotData,
                                             selectedRound,
                                             onSelectRound,
                                             isLoading,
                                             error,
                                             onBack,
                                             onContinue,
                                         }) {
        const [selectedTime, setSelectedTime] = useState(null);
    
        useEffect(() => {
            setSelectedTime(null);
        }, [selectedRound]);
    
        const generateTimeOptions = (meal, round) => {
            let start, end;
            if (meal==="lunch" && round==="first_round") {
                start="13:00"; end="14:00";
            } else if (meal==="lunch" && round==="second_round") {
                start="15:00"; end="16:00";
            } else if (meal==="dinner" && round==="dinner_round") {
                start="20:00"; end="22:00";
            } else {
                return [];
            }
            const opts = [];
            const [sh,sm]=start.split(":").map(Number);
            const [eh,em]=end  .split(":").map(Number);
            for (let t=sh*60+sm; t<=eh*60+em; t+=15) {
                const hh=String(Math.floor(t/60)).padStart(2,"0");
                const mm=String(t%60       ).padStart(2,"0");
                opts.push(`${hh}:${mm}:00`);
            }
            return opts;
        };
    
        const next = () => {
            if (!selectedRound) return alert("Pick a round.");
            if (!selectedTime)  return alert("Pick a time.");
            onContinue(selectedTime);
        };
    
        return (
            <div>
                <h2 className="text-2xl font-semibold mb-6 text-center">
                    Select a Round
                </h2>
                <p className="mb-4 text-center">
                    Available rounds for {mealType==="lunch" ? "Comida" : "Cena"} on{" "}
                    {date.toLocaleDateString()}:
                </p>
    
                {isLoading ? (
                    <div className="flex justify-center items-center py-8">
                        <div className="w-8 h-8 border-4 border-blue-500 border-dashed rounded-full animate-spin" />
                    </div>
                ) : (
                    <div className="grid grid-cols-2 gap-4">
                        {mealType==="lunch" && timeSlotData && (
                            <>
                                <button
                                    onClick={()=>onSelectRound("first_round")}
                                    className={`px-4 py-2 rounded border text-center ${
                                        selectedRound==="first_round"
                                            ? "bg-blue-600 text-white"
                                            : "bg-gray-100"
                                    }`}
                                >
                                    1stRound
                                    <br />
                                    <span className="text-xs">{timeSlotData.first_round?.note}</span>
                                </button>
                                <button
                                    onClick={()=>onSelectRound("second_round")}
                                    className={`px-4 py-2 rounded border text-center ${
                                        selectedRound==="second_round"
                                            ? "bg-blue-600 text-white"
                                            : "bg-gray-100"
                                    }`}
                                >
                                    2ndRound
                                    <br />
                                    <span className="text-xs">
                      {timeSlotData.second_round?.note}
                    </span>
                                </button>
                            </>
                        )}
    
                        {mealType==="dinner" && timeSlotData && (
                            <button
                                onClick={()=>onSelectRound("dinner_round")}
                                className={`col-span-2 px-4 py-2 rounded border text-center ${
                                    selectedRound==="dinner_round"
                                        ? "bg-blue-600 text-white"
                                        : "bg-gray-100"
                                }`}
                            >
                                Dinner
                                <br />
                                <span className="text-xs">
                    {timeSlotData.dinner_round?.note}
                  </span>
                            </button>
                        )}
                    </div>
                )}
    
                {/* time buttons */}
                {selectedRound && (
                    <div className="mt-4 p-4 border rounded bg-gray-50">
                        <p className="text-center font-medium mb-2">Select a Time</p>
                        <div className="grid grid-cols-4 gap-2">
                            {generateTimeOptions(mealType, selectedRound).map((t) => (
                                <button
                                    key={t}
                                    onClick={() => setSelectedTime(t)}
                                    className={`px-2 py-1 rounded border text-center ${
                                        selectedTime===t
                                            ? "bg-blue-600 text-white"
                                            : "bg-gray-100 hover:bg-blue-200"
                                    }`}
                                >
                                    {t.slice(0,5)}
                                </button>
                            ))}
                        </div>
                    </div>
                )}
    
                {error && <p className="text-red-500 mt-4">{error}</p>}
    
                <div className="flex justify-between mt-6">
                    <button onClick={onBack}    className="px-4 py-2 border rounded">
                        Back
                    </button>
                    <button onClick={next}      className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                        Continue
                    </button>
                </div>
            </div>
        );
    }
    
    TimeSlotStep.propTypes = {
        mealType:      PropTypes.oneOf(["lunch","dinner"]).isRequired,
        date:          PropTypes.instanceOf(Date).isRequired,
        timeSlotData:  PropTypes.object,
        selectedRound: PropTypes.string,
        onSelectRound: PropTypes.func.isRequired,
        isLoading:     PropTypes.bool,
        error:         PropTypes.string,
        onBack:        PropTypes.func.isRequired,
        onContinue:    PropTypes.func.isRequired,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/datePicker/Calendar.jsx
    import React from "react";
    import PropTypes from "prop-types";
    import {
        format,
        startOfMonth,
        endOfMonth,
        startOfWeek,
        endOfWeek,
        addDays,
        subMonths,
        addMonths,
        isSameMonth,
        isSameDay,
        isBefore,
        isAfter,
    } from "date-fns";
    import { getDayMealTypes } from "../../services/datePicker.js";
    
    export default function Calendar({
                                         currentMonth,
                                         setCurrentMonth,
                                         today,
                                         maxDate,
                                         selectedDate,
                                         onDateSelect,
                                         availabilityMap,
                                         closedDays = [],
                                     }) {
        // build a set for O(1) lookups
        const closedSet = new Set(closedDays);
    
        const renderDayHeaders = () => {
            return (
                <div className="grid grid-cols-7 text-center font-bold mb-1">
                    {["Mon","Tue","Wed","Thu","Fri","Sat","Sun"].map((d) => (
                        <div key={d}>{d}</div>
                    ))}
                </div>
            );
        };
    
        const monthStart = startOfMonth(currentMonth);
        const monthEnd   = endOfMonth(currentMonth);
        const gridStart  = startOfWeek(monthStart, { weekStartsOn: 1 });
        const gridEnd    = endOfWeek(monthEnd,   { weekStartsOn: 1 });
    
        const getStatus = (day) => {
            const ds = format(day, "yyyy-MM-dd");
    
            if (isBefore(day, today)) {
                return { status: "past", msg: "Date has passed" };
            }
            if (isAfter(day, maxDate)) {
                return { status: "no-data", msg: "No tables available" };
            }
            if (closedSet.has(ds)) {
                return { status: "closed", msg: "Closed" };
            }
    
            const mealTypes = getDayMealTypes(day.getDay());
            if (mealTypes.length === 0) {
                return { status: "closed", msg: "Closed" };
            }
    
            // if availabilityMap is missing this day, consider it loading
            const lunchKey = `${ds}_lunch`;
            const lunchData = availabilityMap[lunchKey];
            if (lunchData === undefined) {
                return { status: "loading", msg: "Loading..." };
            }
            // if lunch is closed or full, check dinner if offered
            if (lunchData === null) {
                if (mealTypes.includes("dinner")) {
                    const dinnerData = availabilityMap[`${ds}_dinner`];
                    if (dinnerData === undefined) {
                        return { status: "loading", msg: "Loading..." };
                    }
                    const hasSpace = Object.values(dinnerData.dinner_round.availability || {}).reduce(
                        (sum, v) => sum + v,
                        0
                    ) > 0;
                    if (hasSpace) return { status: "available", msg: "" };
                }
                return { status: "closed", msg: "Closed" };
            }
            // if lunch has capacity
            const availCount = Object.values(lunchData.first_round.availability || {}).reduce(
                (sum, v) => sum + v, 0
            ) + Object.values(lunchData.second_round.availability || {}).reduce(
                (sum, v) => sum + v, 0
            );
            if (availCount <= 0) {
                // same dinner fallback
                if (mealTypes.includes("dinner")) {
                    const dinnerData = availabilityMap[`${ds}_dinner`];
                    if (dinnerData === undefined) {
                        return { status: "loading", msg: "Loading..." };
                    }
                    const hasSpace = Object.values(dinnerData.dinner_round.availability || {}).reduce(
                        (sum, v) => sum + v,
                        0
                    ) > 0;
                    if (hasSpace) return { status: "available", msg: "" };
                }
                return { status: "full", msg: "Full" };
            }
            return { status: "available", msg: "" };
        };
    
        const rows = [];
        let dayPtr = gridStart;
        while (dayPtr <= gridEnd) {
            const week = [];
            for (let i = 0; i < 7; i++) {
                const d = dayPtr;
                const { status, msg } = getStatus(d);
                const inMonth  = isSameMonth(d, monthStart);
                const selected = selectedDate && isSameDay(d, selectedDate);
    
                let bg  = "bg-white";
                let txt = inMonth ? "text-gray-800" : "text-gray-400";
                if (status === "closed")   { bg = "bg-red-200";   txt = "text-red-800"; }
                else if (status === "past")   { bg = "bg-gray-300";  txt = "text-gray-500 line-through"; }
                else if (status === "no-data") { bg = "bg-yellow-100"; txt = "text-yellow-800"; }
                else if (status === "full")   { bg = "bg-red-300";   txt = "text-red-900"; }
                if (selected)                { bg = "bg-blue-600";   txt = "text-white"; }
    
                week.push(
                    <button
                        key={d.toISOString()}
                        onClick={() => !["past","closed","full","no-data"].includes(status) && onDateSelect(d)}
                        disabled={["past","closed","full","no-data"].includes(status)}
                        className={`${bg} ${txt} relative p-2 h-24 border border-gray-200 flex flex-col items-center justify-center hover:bg-blue-50 transition`}
                        style={{ minWidth: 50 }}
                        title={msg || format(d, "EEEE, MMMM d, yyyy")}
                    >
                        <span className="text-sm font-semibold">{format(d, "d")}</span>
                        {status === "available" && null}
                    </button>
                );
                dayPtr = addDays(dayPtr, 1);
            }
            rows.push(<div key={dayPtr.toISOString()} className="grid grid-cols-7">{week}</div>);
        }
    
        return (
            <div className="bg-white p-4 rounded shadow">
                <div className="flex items-center justify-between mb-2">
                    <button onClick={() => setCurrentMonth((m) => subMonths(m, 1))} className="px-2 py-1 bg-gray-200 rounded hover:bg-gray-300">
                        Prev
                    </button>
                    <h3 className="font-semibold">{format(currentMonth, "MMMM yyyy")}</h3>
                    <button onClick={() => setCurrentMonth((m) => addMonths(m, 1))} className="px-2 py-1 bg-gray-200 rounded hover:bg-gray-300">
                        Next
                    </button>
                </div>
    
                {renderDayHeaders()}
                {rows}
            </div>
        );
    }
    
    Calendar.propTypes = {
        currentMonth:    PropTypes.instanceOf(Date).isRequired,
        setCurrentMonth: PropTypes.func.isRequired,
        today:           PropTypes.instanceOf(Date).isRequired,
        maxDate:         PropTypes.instanceOf(Date).isRequired,
        selectedDate:    PropTypes.instanceOf(Date),
        onDateSelect:    PropTypes.func.isRequired,
        availabilityMap: PropTypes.object.isRequired,
        closedDays:      PropTypes.arrayOf(PropTypes.string),
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/datePicker/Compact.jsx
    import React from "react";
    import PropTypes from "prop-types";
    import { format, addDays, isSameDay, isBefore, isAfter } from "date-fns";
    import { getDayMealTypes } from "../../services/datePicker.js";
    
    export default function Compact({
                                        today,
                                        maxDate,
                                        selectedDate,
                                        onDateSelect,
                                        availabilityMap,
                                        closedDays = [],
                                    }) {
        const closedSet = new Set(closedDays);
        const days = Array.from({ length: 7 }, (_, i) => addDays(today, i));
    
        const getStatus = (d) => {
            const ds = format(d, "yyyy-MM-dd");
            if (isBefore(d, today)) return { status: "past", msg: "Date has passed" };
            if (isAfter(d, maxDate)) return { status: "no-data", msg: "No tables available" };
            if (closedSet.has(ds))  return { status: "closed", msg: "Closed" };
    
            const mealTypes = getDayMealTypes(d.getDay());
            if (mealTypes.length === 0) return { status: "closed", msg: "Closed" };
    
            const lunchKey = `${ds}_lunch`;
            const l = availabilityMap[lunchKey];
            if (l === undefined) return { status: "loading", msg: "Loading..." };
            if (l === null) {
                if (mealTypes.includes("dinner")) {
                    const dd = availabilityMap[`${ds}_dinner`];
                    if (dd === undefined) return { status: "loading", msg: "Loading..." };
                    const hasSpace = Object.values(dd.dinner_round.availability || {}).reduce(
                        (sum, v) => sum + v,
                        0
                    ) > 0;
                    if (hasSpace) return { status: "available", msg: "" };
                }
                return { status: "closed", msg: "Closed" };
            }
            const availLunch = Object.values(l.first_round.availability || {}).reduce((sum, v) => sum + v, 0)
                + Object.values(l.second_round.availability || {}).reduce((sum, v) => sum + v, 0);
            if (availLunch <= 0) {
                if (mealTypes.includes("dinner")) {
                    const dd = availabilityMap[`${ds}_dinner`];
                    if (dd === undefined) return { status: "loading", msg: "Loading..." };
                    const hasSpace = Object.values(dd.dinner_round.availability || {}).reduce(
                        (sum, v) => sum + v,
                        0
                    ) > 0;
                    if (hasSpace) return { status: "available", msg: "" };
                }
                return { status: "full", msg: "Full" };
            }
            return { status: "available", msg: "" };
        };
    
        return (
            <div className="flex space-x-2 overflow-x-auto p-2" role="list">
                {days.map((d) => {
                    const sel = isSameDay(d, selectedDate);
                    const { status, msg } = getStatus(d);
                    const disabled = ["past", "closed", "full", "no-data"].includes(status);
    
                    let bg = "bg-gray-100", txt = "text-gray-800";
                    if (status === "past")      { bg = "bg-gray-300";  txt = "text-gray-500 line-through"; }
                    else if (status === "closed"){ bg = "bg-red-200";   txt = "text-red-900"; }
                    else if (status === "full")  { bg = "bg-red-300";   txt = "text-red-900"; }
                    else if (status === "no-data"){ bg = "bg-yellow-200"; txt = "text-yellow-800"; }
                    if (sel) { bg = "bg-blue-600"; txt = "text-white"; }
    
                    return (
                        <button
                            key={d.toISOString()}
                            onClick={() => !disabled && onDateSelect(d)}
                            disabled={disabled}
                            className={`flex flex-col items-center w-16 py-2 rounded ${bg} ${txt} ${
                                disabled ? "cursor-not-allowed" : "cursor-pointer"
                            } transition hover:bg-blue-200`}
                            title={msg || format(d, "EEEE, MMMM d, yyyy")}
                        >
                            <span className="text-xs">{isSameDay(d, today) ? "Today" : format(d, "EEE")}</span>
                            <span className="text-xl font-bold">{format(d, "d")}</span>
                            <span className="text-xs">{format(d, "MMM")}</span>
                        </button>
                    );
                })}
            </div>
        );
    }
    
    Compact.propTypes = {
        today:           PropTypes.instanceOf(Date).isRequired,
        maxDate:         PropTypes.instanceOf(Date).isRequired,
        selectedDate:    PropTypes.instanceOf(Date),
        onDateSelect:    PropTypes.func.isRequired,
        availabilityMap: PropTypes.object.isRequired,
        closedDays:      PropTypes.arrayOf(PropTypes.string),
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/datePicker/DatePicker.jsx
    import React, { useState, useEffect } from "react";
    import PropTypes from "prop-types";
    import axios from "axios";
    import {
        format,
        addDays,
        startOfMonth,
        endOfMonth,
    } from "date-fns";
    
    import Compact from "./Compact";
    import Calendar from "./Calendar";
    import SkeletonCompact from "./SkeletonCompact";
    import SkeletonCalendar from "./SkeletonCalendar";
    
    const API_URL = import.meta.env.VITE_API_URL || "http://127.0.0.1:8000/api";
    
    export default function DatePicker({
                                           selectedDate = null,          // ← default moved here
                                           onDateSelect,
                                       }) {
        const [viewMode, setViewMode] = useState("compact");
        const [currentMonth, setCurrentMonth] = useState(new Date());
        const [availabilityMap, setAvailabilityMap] = useState({});
        const [isFetchingRange, setIsFetchingRange] = useState(false);
        const [closedDays, setClosedDays] = useState([]);
    
        const today = new Date();
        const maxDate = addDays(today, 30);
    
        // ─── fetch exceptional closed days ──────────────────────
        useEffect(() => {
            (async () => {
                try {
                    const { data } = await axios.get(`${API_URL}/closed-days`);
                    const normalized = Array.isArray(data)
                        ? data.map((d) => d.slice(0, 10))
                        : [];
                    setClosedDays(normalized);
                } catch (e) {
                    console.error("Failed to fetch closed days:", e);
                }
            })();
        }, []);
    
        // ─── compact → next 7 days ─────────────────────────────
        useEffect(() => {
            if (viewMode !== "compact") return;
            (async () => {
                setIsFetchingRange(true);
                try {
                    const start = format(today, "yyyy-MM-dd");
                    const end = format(addDays(today, 6), "yyyy-MM-dd");
                    const [lunchRes, dinnerRes] = await Promise.all([
                        axios.get(`${API_URL}/table-availability-range`, {
                            params: { start, end, mealType: "lunch" },
                        }),
                        axios.get(`${API_URL}/table-availability-range`, {
                            params: { start, end, mealType: "dinner" },
                        }),
                    ]);
    
                    const mapCopy = { ...availabilityMap };
                    Object.entries(lunchRes.data).forEach(([d, info]) => {
                        mapCopy[`${d}_lunch`] = info === "closed" ? null : info;
                    });
                    Object.entries(dinnerRes.data).forEach(([d, info]) => {
                        mapCopy[`${d}_dinner`] = info === "closed" ? null : info;
                    });
                    setAvailabilityMap(mapCopy);
                } catch (e) {
                    console.error("Failed fetch 7d:", e);
                } finally {
                    setIsFetchingRange(false);
                }
            })();
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [viewMode]);
    
        // ─── calendar → full month ─────────────────────────────
        useEffect(() => {
            if (viewMode !== "calendar") return;
            (async () => {
                setIsFetchingRange(true);
                try {
                    const ms = format(startOfMonth(currentMonth), "yyyy-MM-dd");
                    const me = format(endOfMonth(currentMonth), "yyyy-MM-dd");
                    const [lunchRes, dinnerRes] = await Promise.all([
                        axios.get(`${API_URL}/table-availability-range`, {
                            params: { start: ms, end: me, mealType: "lunch" },
                        }),
                        axios.get(`${API_URL}/table-availability-range`, {
                            params: { start: ms, end: me, mealType: "dinner" },
                        }),
                    ]);
    
                    const mapCopy = { ...availabilityMap };
                    Object.entries(lunchRes.data).forEach(([d, info]) => {
                        mapCopy[`${d}_lunch`] = info === "closed" ? null : info;
                    });
                    Object.entries(dinnerRes.data).forEach(([d, info]) => {
                        mapCopy[`${d}_dinner`] = info === "closed" ? null : info;
                    });
                    setAvailabilityMap(mapCopy);
                } catch (e) {
                    console.error("Failed month fetch:", e);
                } finally {
                    setIsFetchingRange(false);
                }
            })();
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [viewMode, currentMonth]);
    
        return (
            <div className="date-picker">
                {/* view-mode toggle */}
                <div className="flex justify-end mb-2">
                    <button
                        onClick={() =>
                            setViewMode((prev) =>
                                prev === "compact" ? "calendar" : "compact"
                            )
                        }
                        className="text-sm underline focus:outline-none"
                    >
                        {viewMode === "compact" ? "Calendar View" : "Compact View"}
                    </button>
                </div>
    
                {/* skeletons vs. real views */}
                {isFetchingRange ? (
                    viewMode === "compact" ? (
                        <SkeletonCompact />
                    ) : (
                        <SkeletonCalendar />
                    )
                ) : viewMode === "compact" ? (
                    <Compact
                        today={today}
                        maxDate={maxDate}
                        selectedDate={selectedDate}
                        onDateSelect={onDateSelect}
                        availabilityMap={availabilityMap}
                        closedDays={closedDays}
                    />
                ) : (
                    <Calendar
                        currentMonth={currentMonth}
                        setCurrentMonth={setCurrentMonth}
                        today={today}
                        maxDate={maxDate}
                        selectedDate={selectedDate}
                        onDateSelect={onDateSelect}
                        availabilityMap={availabilityMap}
                        closedDays={closedDays}
                    />
                )}
            </div>
        );
    }
    
    DatePicker.propTypes = {
        selectedDate: PropTypes.instanceOf(Date),
        onDateSelect: PropTypes.func.isRequired,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/datePicker/SkeletonCalendar.jsx
    import React from "react";
    
    export default function SkeletonCalendar() {
        const cells = Array.from({ length: 42 });
        return (
            <div>
                <div className="flex justify-between items-center mb-2">
                    <div className="w-8 h-5 bg-gray-200 animate-pulse rounded" />
                    <div className="w-32 h-5 bg-gray-200 animate-pulse rounded" />
                    <div className="w-8 h-5 bg-gray-200 animate-pulse rounded" />
                </div>
                <div className="grid grid-cols-7 gap-2">
                    {cells.map((_,i) => (
                        <div key={i} className="w-10 h-10 bg-gray-200 rounded animate-pulse m-1" />
                    ))}
                </div>
            </div>
        );
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/datePicker/SkeletonCompact.jsx
    import React from "react";
    
    export default function SkeletonCompact() {
        const days = Array.from({ length: 7 });
        return (
            <div className="flex space-x-2 overflow-x-auto p-2">
                {days.map((_,i) => (
                    <div
                        key={i}
                        className="w-12 h-20 bg-gray-200 rounded animate-pulse flex flex-col items-center p-2"
                    >
                        <div className="w-8 h-3 bg-gray-300 rounded mb-1" />
                        <div className="w-6 h-4 bg-gray-300 rounded mb-1" />
                        <div className="w-8 h-3 bg-gray-300 rounded" />
                    </div>
                ))}
            </div>
        );
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/layout/AnimatedBackground.jsx
    import React from "react";
    
    const AnimatedBackground = () => {
        return (
            <div
                className="fixed inset-0 -z-10"
                style={{
                    background: "linear-gradient(135deg, #f8fafc, #e2e8f0)",
                }}
            >
                {/* A subtle, professional watermark */}
                <div className="absolute inset-0 flex items-center justify-center opacity-20">
                    <h1 className="text-gray-600 text-4xl font-bold">Stellar Progress</h1>
                </div>
            </div>
        );
    };
    
    export default AnimatedBackground;

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/layout/Layout.jsx
    import "react";
    import { Link } from "react-router-dom";
    
    const Layout = ({ children }) => {
        return (
            <div>
                {/* Global Navigation Bar */}
                <nav className="bg-gray-800 p-4 text-white flex justify-between">
                    <div>
                        <Link to="/" className="hover:text-gray-300 mr-4">
                            Home
                        </Link>
                        <Link to="/booking" className="hover:text-gray-300 mr-4">
                            Booking
                        </Link>
                    </div>
                    <div>
                        <Link to="/admin" className="hover:text-gray-300">
                            Admin
                        </Link>
                    </div>
                </nav>
                {/* Page Content */}
                <main>{children}</main>
            </div>
        );
    };
    
    export default Layout;

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/components/layout/ProtectedRoute.jsx
    // src/components/ProtectedRoute.jsx
    import "react";
    import { Navigate } from "react-router-dom";
    import PropTypes from "prop-types";
    
    function ProtectedRoute({ children }) {
        const isAuthenticated = localStorage.getItem("isAuthenticated");
    
        // If user is NOT authenticated, redirect to /login
        if (!isAuthenticated) {
            return <Navigate to="/login" replace />;
        }
    
        // Otherwise, render the protected component (AdminDashboard)
        return children;
    }
    
    ProtectedRoute.propTypes = {
        children: PropTypes.node.isRequired,
    };
    export default ProtectedRoute;

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/index.css
    /* src/index.css or src/main.css */
    
    @tailwind base;
    @tailwind components;
    @tailwind utilities;

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/main.jsx
    // src/main.jsx
    import React from "react";
    import ReactDOM from "react-dom/client";
    import App from "./App";
    import "./index.css"; // or "./main.css" — your Tailwind file
    
    ReactDOM.createRoot(document.getElementById("root")).render(
        <React.StrictMode>
            <App />
        </React.StrictMode>
    );

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/pages/AdminDashboard.jsx
    // frontend/src/pages/AdminDashboard.jsx
    import React, { useState, useEffect, useCallback } from "react";
    import { useNavigate } from "react-router-dom";
    
    import {
        IconCalendarClock,
        IconClock,
        IconChartBar,
        IconSettings,
        IconLogout,
    } from "@tabler/icons-react";
    
    import LanguagePicker       from "../components/admin/utils/LanguagePicker.jsx";
    import { fetchAllBookings } from "../services/bookingService";
    import CurrentBookings      from "../components/admin/currentBookings/CurrentBookings";
    import BookingsOverview     from "../components/admin/sharedBookings/BookingsOverview";
    import AlgorithmTester      from "../components/admin/algorithmTest/AlgorithmTester";
    import MetricsDashboard     from "../components/admin/metrics/MetricsDashboard";
    import OperationalSettings  from "../components/admin/settings/OperationalSettings.jsx";
    import { translate, setLanguage } from "../services/i18n";
    
    const navMeta = [
        { key: "current",  icon: IconClock },
        { key: "future",   icon: IconCalendarClock },
        { key: "metrics",  icon: IconChartBar },
        { key: "tester",   icon: IconChartBar },
        { key: "settings", icon: IconSettings },
    ];
    
    export default function AdminDashboard() {
        const navigate = useNavigate();
    
        /* ─── language ─── */
        const [lang, setLang] = useState(
            () => localStorage.getItem("adminLang") || "ca"
        );
        const t = (key, vars) => translate(lang, key, vars);
        const changeLang = (lng) => {
            setLanguage(lng);
            setLang(lng);
        };
    
        /* ─── booking data ─── */
        const [active,   setActive]   = useState("current");
        const [bookings, setBookings] = useState([]);
        const [loading,  setLoading]  = useState(true);
    
        const loadBookings = useCallback(async () => {
            setLoading(true);
            try {
                const data = await fetchAllBookings();
                if (Array.isArray(data)) setBookings(data);
            } catch (err) {
                console.error("Failed to fetch bookings:", err);
            } finally {
                setLoading(false);
            }
        }, []);
    
        useEffect(() => { loadBookings(); }, [loadBookings]);
    
        /* ─── auth ─── */
        const logout = () => {
            localStorage.removeItem("isAuthenticated");
            navigate("/login");
        };
    
        const renderPanel = () => {
            if (loading) return <p>{t("tester.loadingTA")}</p>;
    
            switch (active) {
                case "current":
                    return (
                        <CurrentBookings
                            bookings={bookings}
                            onDataRefresh={loadBookings}
                        />
                    );
                case "future":
                    return (
                        <BookingsOverview
                            mode="future"
                            bookings={bookings}
                            showChart={false}
                            allowDrill={true}
                        />
                    );
                case "metrics":
                    return <MetricsDashboard bookings={bookings} />;
                case "tester":
                    return (
                        <AlgorithmTester
                            bookings={bookings}
                            onRefresh={loadBookings}
                        />
                    );
                case "settings":
                    /* ★ PASS bookings + refresher so that closing a day
                       can purge its bookings and reload the list */
                    return (
                        <OperationalSettings
                            bookings={bookings}
                            onRefresh={loadBookings}
                        />
                    );
                default:
                    return null;
            }
        };
    
        const version = import.meta.env.VITE_APP_VERSION || "1.0.3";
    
        return (
            <div className="flex min-h-screen bg-gray-100">
                {/* ───────── sidebar ───────── */}
                <aside className="relative w-64 bg-white border-r flex flex-col overflow-y-auto">
                    <div className="border-b">
                        <div className="flex items-center justify-between p-4">
                <span className="text-xl font-semibold">
                  {t("admin.title")}
                </span>
                            <code className="text-sm text-gray-500">
                                {t("admin.versionPrefix")}{version}
                            </code>
                        </div>
                        <div className="px-4 pb-4">
                            <LanguagePicker onChange={changeLang} />
                        </div>
                    </div>
    
                    <div className="flex-1 p-4 space-y-1">
                        {navMeta.map(({ key, icon: IconCmp }) => (
                            <button
                                key={key}
                                onClick={() => setActive(key)}
                                className={`w-full flex items-center p-2 rounded-md ${
                                    active === key
                                        ? "bg-blue-100 text-blue-700 font-medium"
                                        : "text-gray-700 hover:bg-gray-50"
                                }`}
                            >
                                <IconCmp className="mr-3 h-5 w-5 text-gray-400" />
                                {t(`admin.nav.${key}`)}
                            </button>
                        ))}
                    </div>
    
                    {/* ─── logout ─── */}
                    <div className="sticky bottom-0 left-0 w-full bg-white p-4 border-t">
                        <button
                            onClick={logout}
                            className="w-full flex items-center p-2 rounded-md text-gray-700 hover:bg-gray-50"
                        >
                            <IconLogout className="mr-3 h-5 w-5 text-gray-400" />
                            {t("admin.logout")}
                        </button>
                    </div>
                </aside>
    
                {/* ───────── main ───────── */}
                <main className="flex-1 p-6 overflow-auto">
                    {renderPanel()}
                </main>
            </div>
        );
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/pages/BookingPage.jsx
    import React from "react";
    import BookingWizard from "../components/bookingWizard/BookingWizard";
    
    const BookingPage = () => {
        return (
            <div>
                {/* bookingWizard contains the multi-step booking process */}
                <BookingWizard />
            </div>
        );
    };
    
    export default BookingPage;

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/pages/HomePage.jsx
    // homepage.jsx
    import React from "react";
    import { Link } from "react-router-dom";
    
    const HomePage = () => {
        return (
            <div className="font-sans text-gray-800">
                {/* Hero Section */}
                <header
                    className="relative h-[400px] flex flex-col items-center justify-center text-white"
                >
                    <div className="absolute inset-0 bg-black bg-opacity-50"></div>
                    <div className="z-10 text-center px-4">
                        <h1 className="text-4xl font-bold mb-4">
                            Welcome to Stellar Progress Company
                        </h1>
                        <p className="text-xl mb-8">
                            The easiest way to manage reservations and online bookings for your restaurant.
                        </p>
                        <Link
                            to="/booking"
                            className="bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded inline-block"
                        >
                            Book a Table
                        </Link>
                    </div>
                </header>
    
                {/* Features Section */}
                <section className="py-8 bg-gray-100">
                    <div className="max-w-7xl mx-auto px-4">
                        <h2 className="text-2xl font-bold mb-4 text-center">Features</h2>
                        <div className="flex flex-wrap -mx-4">
                            <div className="w-full md:w-1/3 px-4 mb-8">
                                <div className="bg-white rounded shadow p-6">
                                    <h3 className="font-semibold mb-2">Feature One</h3>
                                    <p className="text-gray-700">
                                        Quickly see available slots and secure a table in seconds.
                                    </p>
                                </div>
                            </div>
                            <div className="w-full md:w-1/3 px-4 mb-8">
                                <div className="bg-white rounded shadow p-6">
                                    <h3 className="font-semibold mb-2">Feature Two</h3>
                                    <p className="text-gray-700">
                                        Seamless integration with your existing website—add a booking widget, and you’re good to go!
                                    </p>
                                </div>
                            </div>
                            <div className="w-full md:w-1/3 px-4 mb-8">
                                <div className="bg-white rounded shadow p-6">
                                    <h3 className="font-semibold mb-2">Feature Three</h3>
                                    <p className="text-gray-700">
                                        Access advanced analytics to understand peak hours, optimize seating, and increase your revenue.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
    
                {/* Call-To-Action Section */}
                <section className="py-12 bg-gradient-to-r from-orange-400 to-pink-500 text-white text-center">
                    <h2 className="text-3xl font-bold mb-4">Ready to get started?</h2>
                    <p className="text-lg mb-8">
                        Join dozens of restaurants that rely on Stellar Progress for an unforgettable experience.
                    </p>
                    <Link
                        to="/booking"
                        className="bg-white text-orange-600 hover:text-orange-700 px-6 py-3 rounded font-semibold"
                    >
                        Reserve a Table Now
                    </Link>
                </section>
            </div>
        );
    };
    
    export default HomePage;

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/pages/LoginPage.jsx
    // src/pages/LoginPage.jsx
    import React, { useState } from "react";
    import { useNavigate } from "react-router-dom";
    
    function LoginPage() {
        const navigate = useNavigate();
    
        // Form state
        const [username, setUsername] = useState("");
        const [password, setPassword] = useState("");
        const [error, setError] = useState("");
    
        function handleSubmit(e) {
            e.preventDefault();
    
            // Hard-coded credentials
            if (username === "admin" && password === "1234") {
                localStorage.setItem("isAuthenticated", "true");
                navigate("/admin");
            } else {
                setError("Invalid credentials. Try admin / 1234.");
            }
        }
    
        return (
            <div className="flex min-h-screen">
                {/* Left side background image: hidden on small screens */}
                <div
                    className="hidden md:block w-1/2 bg-cover bg-center"
                    style={{
                        backgroundImage:
                            'url("https://images.unsplash.com/photo-1484242857719-4b9144542727?auto=format&fit=crop&w=1280&q=80")',
                    }}
                ></div>
    
                {/* Right side login form */}
                <div className="w-full md:w-1/2 p-8 flex flex-col justify-center bg-white">
                    <h2 className="text-3xl font-bold mb-6 text-center">Welcome back!</h2>
    
                    {/* Error message */}
                    {error && <p className="text-red-500 text-center mb-4">{error}</p>}
    
                    <form onSubmit={handleSubmit} className="space-y-4">
                        {/* USERNAME FIELD */}
                        <div>
                            <label className="block mb-1 font-medium text-gray-700">
                                Username
                            </label>
                            <input
                                type="text"
                                placeholder="admin"
                                value={username}
                                onChange={(e) => setUsername(e.target.value)}
                                className="w-full border border-gray-300 rounded px-3 py-2"
                            />
                        </div>
    
                        {/* PASSWORD FIELD */}
                        <div>
                            <label className="block mb-1 font-medium text-gray-700">
                                Password
                            </label>
                            <input
                                type="password"
                                placeholder="1234"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                className="w-full border border-gray-300 rounded px-3 py-2"
                            />
                        </div>
    
                        {/* 'Keep me logged in' */}
                        <div className="flex items-center justify-between mt-2">
                            <label className="flex items-center space-x-2">
                                <input type="checkbox" className="form-checkbox" />
                                <span className="text-sm text-gray-600">Keep me logged in</span>
                            </label>
                        </div>
    
                        {/* SUBMIT */}
                        <button
                            type="submit"
                            className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition-colors"
                        >
                            Login
                        </button>
                    </form>
    
                    <p className="text-center mt-4">
                        Don&apos;t have an account?{" "}
                        <a href="#" className="text-blue-600 font-semibold">
                            Register
                        </a>
                    </p>
                </div>
            </div>
        );
    }
    
    export default LoginPage;

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/services/bookingService.js
    import axios from "axios";
    axios.defaults.baseURL = ""; // proxy via Vite
    
    /*──────────────────────────────────────────────
      Simple in-memory cache for table availability
    ──────────────────────────────────────────────*/
    const _taCache = new Map();
    const buildKey = (start, end, meal) => `${start}|${end}|${meal}`;
    
    /**
     * Clear every cached /api/table-availability-range response.
     * Call this after any action (e.g. closing/opening a day)
     * that could invalidate previously-fetched data.
     */
    export function clearAvailabilityCache() {
        _taCache.clear();
    }
    
    export async function fetchTableAvailabilityRange(
        start,
        end,
        mealType = "lunch"
    ) {
        const key = buildKey(start, end, mealType);
        const hit = _taCache.get(key);
    
        if (hit?.status === "resolved") return hit.data;
    
        if (hit?.status === "pending") return hit.promise;
    
        const promise = axios
            .get("/api/table-availability-range", {
                params: { start, end, mealType },
            })
            .then((res) => {
                _taCache.set(key, { status: "resolved", data: res.data });
                return res.data;
            })
            .catch((err) => {
                _taCache.delete(key);
                throw err;
            });
    
        _taCache.set(key, { status: "pending", promise });
        return promise;
    }
    
    /*──────────────────────────────────────────────
      Other booking-related helpers
    ──────────────────────────────────────────────*/
    export async function fetchAvailableTimeSlots(params) {
        const { data } = await axios.get("/api/table-availability", { params });
        return data;
    }
    
    export async function fetchAllBookings() {
        const { data } = await axios.get("/api/bookings");
        return data.data;
    }
    
    export async function createBooking(payload) {
        const { data } = await axios.post("/api/bookings", payload);
        return data;
    }
    
    export async function updateBooking(id, payload) {
        const { data } = await axios.patch(`/api/bookings/${id}`, payload);
        return data;
    }
    
    export async function deleteBooking(id) {
        const { data } = await axios.delete(`/api/bookings/${id}`);
        return data;
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/services/datePicker.js
    import { isBefore, isAfter, format } from "date-fns";
    
    /**
     * dayOfWeek: 0=Sun,1=Mon…6=Sat
     */
    export function getDayMealTypes(dayOfWeek) {
        switch (dayOfWeek) {
            case 1: // Mon
            case 2: // Tue
                return []; // closed
            case 3: // Wed
            case 4: // Thu
                return ["lunch"];
            case 5: // Fri
            case 6: // Sat
            case 0: // Sun
                return ["lunch", "dinner"];
            default:
                return [];
        }
    }
    
    export function sumAvailability(dayAvailability) {
        if (!dayAvailability || typeof dayAvailability !== "object") return 0;
        let sum = 0;
    
        // lunch rounds
        ["first_round", "second_round"].forEach((rk) => {
            Object.values(dayAvailability[rk]?.availability || {}).forEach((v) => {
                sum += v;
            });
        });
    
        // dinner
        Object.values(dayAvailability.dinner_round?.availability || {}).forEach((v) => {
            sum += v;
        });
    
        return sum;
    }
    
    /**
     * true if dateA < dateB or same calendar day
     */
    export function isBeforeOrSameDay(dateA, dateB) {
        return isBefore(dateA, dateB) || format(dateA, "yyyy-MM-dd") === format(dateB, "yyyy-MM-dd");
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/services/i18n.js
    // frontend/src/services/i18n.js
    
    import ca from "./languages/ca";
    import es from "./languages/es";
    import en from "./languages/en";
    
    const translations = { ca, es, en };
    
    // Look first in either storage key for a saved language, default to Catalan
    const STORAGE_KEYS = ["adminLang", "lang"];
    function detectStoredLang() {
        for (const key of STORAGE_KEYS) {
            const v = localStorage.getItem(key);
            if (v && translations[v]) return v;
        }
        return "ca";
    }
    
    let currentLang = detectStoredLang();
    
    export function setLanguage(lang) {
        if (!translations[lang]) return;
        currentLang = lang;
        STORAGE_KEYS.forEach((k) => localStorage.setItem(k, lang));
    }
    
    export function getLanguage() {
        return currentLang;
    }
    
    /**
     * translate()
     *
     * Usage:
     *   translate("en", "admin.nav.current")
     *   translate("modal.dateDisplay", { weekday, day, month, year })
     */
    export function translate(arg1, arg2, arg3, arg4) {
        let lang, fullPath, params = {};
    
        if (translations[arg1]) {
            // Style A: translate(lang, "section.path", params?)
            lang = arg1;
            if (typeof arg2 === "string" && (arg3 === undefined || typeof arg3 === "object")) {
                fullPath = arg2;
                params   = arg3 || {};
            } else {
                fullPath = [arg2, arg3].filter((x) => typeof x === "string").join(".");
                params   = arg4 || {};
            }
        } else {
            // Style B: translate("section.path", params?)
            lang     = currentLang;
            fullPath = arg1;
            params   = arg2 || {};
        }
    
        const deepGet = (obj, path) =>
            path.split(".").reduce((acc, key) =>
                acc && acc[key] !== undefined ? acc[key] : null, obj
            );
    
        let text =
            deepGet(translations[lang], fullPath) ||
            deepGet(translations.en,   fullPath) ||
            `!${fullPath}!`;
    
        // interpolate {tokens}
        if (typeof text === "string" && text.includes("{")) {
            text = text.replace(/\{(\w+?)\}/g, (_, token) =>
                Object.prototype.hasOwnProperty.call(params, token)
                    ? params[token]
                    : `{${token}}`
            );
        }
    
        return text;
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/services/languages/ca.js
    export default {
        admin: {
            title: "El meu Admin",
            versionPrefix: "v",
            language: "Llengua",
            nav: {
                current: "Reserves actuals",
                future: "Reserves futures",
                past: "Reserves passades",
                metrics: "Mètriques",
                tester: "Prova d'algorisme",
                settings: "Ajustos",
            },
            refresh: "Actualitza",
            logout: "Tanca sessió",
            manualBooking: "+ Reserva manual",
            today: "Avui",
            bookings: "Reserves",
            totalClients: "Total Clients",
            expandFloor: "Expandir sala",
            hideFloor: "Amaga sala",
            close: "Tanca",
            compact: "Compacte",
            calendar: "Calendari",
        },
    
        overview: {
            bookings: "Reserves",
            guests: "Clients",
            futureBookings: "Reserves futures",
            pastBookings: "Reserves passades",
            dataWindow: "Finestra de dades: {start} → {end}",
            bookings30d: "Reserves (30 d)",
            guests30d: "Clients (30 d)",
            avgGuests: "Mitjana clients / reserva",
            uniqueNames: "Noms únics",
            vsPrevious: "vs 30 d anteriors",
            upcomingRange: "Properes {n} d",
            pastRange: "Passades {n} d",
            peakDayGuests: "Màxim clients en un dia", // ← added
        },
    
        modal: {
            addTitle:      "Afegir reserva manual",
            dateDisplay:   "{weekday}, {day} {month} {year}",
            fullName:      "Nom complet",
            guests:        "Clients",
            phoneOptional: "Telèfon (opcional)",
            meal:  { lunch: "Dinar", dinner: "Sopar" },
            round: { first: "1a Torn", second: "2a Torn" },
            time:        "Hora",
            close:       "Tanca",
            save:        "Desa",
            closedDay:   "Ho sentim, estem tancats aquell dia.",
            errorRequired: "Si us plau omple tots els camps obligatoris.",
            saveError:     "Error en desar — torna-ho a provar.",
        },
    
        datePicker: {
            upcoming: "Properes {n} d",
            past:     "Passades {n} d",
        },
    
        tester: {
            title:        "Prova d'algorisme",
            partySizes:   "Mides de grup (separades per comes)",
            date:         "Data",
            meal:         "Àpat",
            startingTime: "Hora inicial",
            runTest:      "Executa prova",
            results:      "Resultats",
            ok:           "Correcte",
            rejected:     "Rebutjat",
            loadingTA:    "Carregant disponibilitat de taules…",
        },
    
        schedule: {
            header:       "Horari per a {date}",
            round: {
                lunchFirst:  "Dinar–1r Torn",
                lunchSecond: "Dinar–2n Torn",
                dinner:      "Sopar",
            },
            table: {
                time:         "Hora",
                name:         "Nom",
                totalClients: "Clients totals",
            },
            noBookings:   "Cap reserva en aquest torn.",
        },
    
        calendar: {
            prev:           "Ant.",
            next:           "Seg.",
            badgeBookings:  "Reserves",
            badgeClients:   "Clients",
        },
    
        chart: {
            titleTotalPeople: "Gràfic de persones totals",
            totalPeople:      "Persones totals",
        },
    
        tableUsage: "Ús de taules",
    
        settings: {
            bookingWindowFrom: "Acceptar reserves a partir de",
            closeDay:          "Tancar un dia",
            openDay:           "Obrir un dia",
            openUntil:         "Obrir reserves fins a aquest dia",
            save:              "Desa",
            closed:            "Tancat (clic per obrir)",
            open:              "Obert (clic per tancar)",
            chooseDay:         "Tria un dia",
            successClosed:     "Dia tancat!",
            successOpened:     "Dia obert!",
            closing:           "Tancant…",
            opening:           "Obrint…",
        },
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/services/languages/en.js
    export default {
        admin: {
            title: "My Admin",
            versionPrefix: "v",
            language: "Language",
            nav: {
                current: "Current Bookings",
                future: "Future Bookings",
                past: "Past Bookings",
                metrics: "Metrics",
                tester: "Algorithm Tester",
                settings: "Settings",
            },
            refresh: "Refresh",
            logout: "Log Out",
            manualBooking: "+ Manual Booking",
            today: "Today",
            bookings: "Bookings",
            totalClients: "Total Clients",
            expandFloor: "Expand floor",
            hideFloor: "Hide floor",
            close: "Close",
            compact: "Compact",
            calendar: "Calendar",
        },
    
        overview: {
            bookings: "Bookings",
            guests: "Guests",
            futureBookings: "Future Bookings",
            pastBookings: "Past Bookings",
            dataWindow: "Data window: {start} → {end}",
            bookings30d: "Bookings (30 d)",
            guests30d: "Guests (30 d)",
            avgGuests: "Avg Guests / Booking",
            uniqueNames: "Unique Names",
            vsPrevious: "vs previous 30 d",
            upcomingRange: "Upcoming {n} d",
            pastRange: "Past {n} d",
            peakDayGuests: "Peak Day Guests", // ← added
        },
    
        modal: {
            addTitle: "Add Manual Booking",
            dateDisplay: "{weekday}, {month} {day}, {year}",
            fullName: "Full Name",
            guests: "Guests",
            phoneOptional: "Phone (optional)",
            meal: { lunch: "Lunch", dinner: "Dinner" },
            round: { first: "1st Round", second: "2nd Round" },
            time: "Time",
            close: "Close",
            save: "Save",
            closedDay: "Sorry, we’re closed that day.",
            errorRequired: "Please fill in all required fields.",
            saveError: "Error saving — please try again.",
        },
    
        datePicker: {
            upcoming: "Upcoming {n} d",
            past: "Past {n} d",
        },
    
        tester: {
            title: "Algorithm Tester",
            partySizes: "Party sizes (comma-separated)",
            date: "Date",
            meal: "Meal",
            startingTime: "Starting time",
            runTest: "Run Test",
            results: "Results",
            ok: "OK",
            rejected: "Rejected",
            loadingTA: "Loading table availability…",
        },
    
        schedule: {
            header: "Schedule for {date}",
            round: {
                lunchFirst: "Lunch–1st Round",
                lunchSecond: "Lunch–2nd Round",
                dinner: "Dinner",
            },
            table: {
                time: "Time",
                name: "Name",
                totalClients: "Total Clients",
            },
            noBookings: "No bookings in this round.",
        },
    
        calendar: {
            prev: "Prev",
            next: "Next",
            badgeBookings: "Bookings",
            badgeClients: "Clients",
        },
    
        chart: {
            titleTotalPeople: "Total People Chart",
            totalPeople: "Total People",
        },
    
        tableUsage: "Table Usage",
    
        settings: {
            bookingWindowFrom: "Accept bookings from",
            closeDay: "Close a day",
            openDay: "Open a day",
            openUntil: "Open bookings until that day",
            save: "Save",
            closed: "Closed (click to open)",
            open: "Open (click to close)",
            chooseDay: "Choose a day",
            successClosed: "Day closed!",
            successOpened: "Day opened!",
            closing: "Closing…",
            opening: "Opening…",
        },
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/services/languages/es.js
    export default {
        admin: {
            title:         "Mi Admin",
            versionPrefix: "v",
            language:      "Idioma",
            nav: {
                current:  "Reservas actuales",
                future:   "Reservas futuras",
                past:     "Reservas pasadas",
                metrics:  "Métricas",
                tester:   "Probador de algoritmo",
                settings: "Ajustes",
            },
            refresh:       "Actualizar",
            logout:        "Cerrar sesión",
            manualBooking: "+ Reserva manual",
            today:         "Hoy",
            bookings:      "Reservas",
            totalClients:  "Total Clientes",
            expandFloor:   "Expandir sala",
            hideFloor:     "Ocultar sala",
            close:         "Cerrar",
            compact:       "Compacto",
            calendar:      "Calendario",
        },
    
        overview: {
            bookings: "Reservas",
            guests: "Clientes",
            futureBookings: "Reservas futuras",
            pastBookings: "Reservas pasadas",
            dataWindow: "Ventana de datos: {start} → {end}",
            bookings30d: "Reservas (30 d)",
            guests30d: "Clientes (30 d)",
            avgGuests: "Prom Clientes / Reserva",
            uniqueNames: "Nombres únicos",
            vsPrevious: "vs 30 d anteriores",
            upcomingRange: "Próximos {n} d",
            pastRange: "Últimos {n} d",
            peakDayGuests: "Máximo clientes en un día", // ← added
        },
    
        modal: {
            addTitle:      "Añadir reserva manual",
            dateDisplay:   "{weekday}, {day} {month} {year}",
            fullName:      "Nombre completo",
            guests:        "Clientes",
            phoneOptional: "Teléfono (opcional)",
            meal:  { lunch: "Comida", dinner: "Cena" },
            round: { first: "1ª Turno", second: "2ª Turno" },
            time:        "Hora",
            close:       "Cerrar",
            save:        "Guardar",
            closedDay:   "Lo sentimos, ese día estamos cerrados.",
            errorRequired: "Por favor complete todos los campos obligatorios.",
            saveError:     "Error al guardar — inténtalo de nuevo.",
        },
    
        datePicker: {
            upcoming: "Próximos {n} d",
            past:     "Últimos {n} d",
        },
    
        tester: {
            title:        "Probador de algoritmo",
            partySizes:   "Tamaños de grupo (separados por coma)",
            date:         "Fecha",
            meal:         "Comida",
            startingTime: "Hora inicial",
            runTest:      "Ejecutar prueba",
            results:      "Resultados",
            ok:           "OK",
            rejected:     "Rechazado",
            loadingTA:    "Cargando disponibilidad de mesas…",
        },
    
        schedule: {
            header:       "Horario para {date}",
            round: {
                lunchFirst:  "Comida–1er Turno",
                lunchSecond: "Comida–2º Turno",
                dinner:      "Cena",
            },
            table: {
                time:         "Hora",
                name:         "Nombre",
                totalClients: "Clientes totales",
            },
            noBookings:   "Sin reservas en este turno.",
        },
    
        calendar: {
            prev:           "Anterior",
            next:           "Siguiente",
            badgeBookings:  "Reservas",
            badgeClients:   "Clientes",
        },
    
        chart: {
            titleTotalPeople: "Gráfico de personas totales",
            totalPeople:      "Personas totales",
        },
    
        tableUsage: "Uso de mesas",
    
        settings: {
            bookingWindowFrom: "Aceptar reservas a partir de",
            closeDay:          "Cerrar un día",
            openDay:           "Abrir un día",
            openUntil:         "Abrir reservas hasta ese día",
            save:              "Guardar",
            closed:            "Cerrado (clic para abrir)",
            open:              "Abierto (clic para cerrar)",
            chooseDay:         "Elige un día",
            successClosed:     "Día cerrado",
            successOpened:     "¡Día abierto!",
            closing:           "Cerrando…",
            opening:           "Abriendo…",
        },
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/services/mealOverrides.js
    /* Simple fetch helpers for meal-override endpoints */
    
    export async function fetchMealOverrides() {
        const resp = await fetch("/api/meal-overrides");
        const data = await resp.json();
        return Array.isArray(data) ? data : [];
    }
    
    export async function toggleMealOverride(dateYMD, mealType) {
        await fetch("/api/meal-overrides/toggle", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ date: dateYMD, meal_type: mealType }),
        });
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend/src/services/settingsService.js
    import axios from "axios";
    
    /* ───────────────────────────────
       Close / open a specific day
       ─────────────────────────────── */
    
    /**
     * Mark a calendar day as “closed”.
     * Backend will usually toggle, but we expose
     * a single-purpose helper for clarity.
     *
     * @param {string} dateYMD – “YYYY-MM-DD”
     */
    export async function closeSpecificDay(dateYMD) {
        const { data } = await axios.post("/api/closed-days/toggle", {
            date: dateYMD,
        });
        return data;           // whatever the API echoes back
    }
    
    /* ───────────────────────────────
       Booking-window helpers
       ─────────────────────────────── */
    
    /**
     * Extend the booking window so guests can
     * book **up to and including** this date.
     *
     * @param {string} dateYMD – “YYYY-MM-DD”
     */
    export async function openBookingWindowUntil(dateYMD) {
        const { data } = await axios.put("/api/settings/booking-open-until", {
            booking_open_until: dateYMD,
        });
        return data.booking_open_until;
    }

