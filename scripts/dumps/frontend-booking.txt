└── frontend
    ├── /frontend-booking/eslint.config.js
    ├── /frontend-booking/index.html
    ├── /frontend-booking/postcss.config.js
    ├── /frontend-booking/src/.env
    ├── /frontend-booking/src/App.jsx
    ├── /frontend-booking/src/components/bookingWizard/BookingWizard.jsx
    ├── /frontend-booking/src/components/bookingWizard/steps/ContactInfoStep.jsx
    ├── /frontend-booking/src/components/bookingWizard/steps/ReservationDetailsStep.jsx
    ├── /frontend-booking/src/components/bookingWizard/steps/TimeSlotStep.jsx
    ├── /frontend-booking/src/components/datePicker/Calendar.jsx
    ├── /frontend-booking/src/components/datePicker/Compact.jsx
    ├── /frontend-booking/src/components/datePicker/DatePicker.jsx
    ├── /frontend-booking/src/components/datePicker/SkeletonCalendar.jsx
    ├── /frontend-booking/src/components/datePicker/SkeletonCompact.jsx
    ├── /frontend-booking/src/index.css
    ├── /frontend-booking/src/main.jsx
    ├── /frontend-booking/src/pages/BookingPage.jsx
    ├── /frontend-booking/src/services/bookingService.js
    ├── /frontend-booking/src/services/datePicker.js
    ├── /frontend-booking/src/services/mealOverrides.js
    ├── /frontend-booking/src/services/settingsService.js
    ├── /frontend-booking/tailwind.config.js
    ├── /frontend-booking/vite.config.js

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/eslint.config.js
    import js from '@eslint/js'
    import globals from 'globals'
    import react from 'eslint-plugin-react'
    import reactHooks from 'eslint-plugin-react-hooks'
    import reactRefresh from 'eslint-plugin-react-refresh'
    
    export default [
      { ignores: ['dist'] },
      {
        files: ['**/*.{js,jsx}'],
        languageOptions: {
          ecmaVersion: 2020,
          globals: globals.browser,
          parserOptions: {
            ecmaVersion: 'latest',
            ecmaFeatures: { jsx: true },
            sourceType: 'module',
          },
        },
        settings: { react: { version: '18.3' } },
        plugins: {
          react,
          'react-hooks': reactHooks,
          'react-refresh': reactRefresh,
        },
        rules: {
          ...js.configs.recommended.rules,
          ...react.configs.recommended.rules,
          ...react.configs['jsx-runtime'].rules,
          ...reactHooks.configs.recommended.rules,
          'react/jsx-no-target-blank': 'off',
          'react-refresh/only-export-components': [
            'warn',
            { allowConstantExport: true },
          ],
        },
      },
    ]

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/index.html
    <!-- index.html at the root of your project (frontend/index.html) -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <title>Stellar Progress Booking System</title>
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    </head>
    <body>
    <div id="root"></div>
    <!-- Vite will inject the built script here -->
    <script type="module" src="/src/main.jsx"></script>
    </body>
    </html>

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/postcss.config.js
    export default {
      plugins: {
        tailwindcss: {},
        autoprefixer: {},
      },
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/.env
    VITE_API_URL=http://localhost:8000/api

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/App.jsx
    // src/App.jsx
    import React from "react";
    import BookingPage from "./pages/BookingPage";
    
    export default function App() {
        return <BookingPage />;
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/components/bookingWizard/BookingWizard.jsx
    // frontend/src/components/bookingWizard/BookingWizard.jsx
    import React, { useState, useEffect } from "react";
    import { format } from "date-fns";
    import {
        fetchAvailableTimeSlots,
        createBooking,
    } from "../../services/bookingService";
    import ReservationDetailsStep from "./steps/ReservationDetailsStep";
    import TimeSlotStep from "./steps/TimeSlotStep";
    import ContactInfoStep from "./steps/ContactInfoStep";
    
    export default function BookingWizard() {
        const [step, setStep] = useState(1);
    
        /* ─── reservation details ─── */
        const [adults, setAdults] = useState(2);
        const [kids, setKids] = useState(0);
        const [date, setDate] = useState(new Date());
        const [meal, setMeal] = useState("lunch");
        const [longStay, setLongStay] = useState(false);
    
        /* ─── slot search ─── */
        const [slotData, setSlotData] = useState(null);
        const [round, setRound] = useState("");
        const [time, setTime] = useState(null);
        const [loadingSlots, setLoadingSlots] = useState(false);
    
        /* ─── contact & finalise ─── */
        const [fullName, setFullName] = useState("");
        const [phonePref, setPhonePref] = useState("+34");
        const [phoneNum, setPhoneNum] = useState("");
        const [email, setEmail] = useState("");
        const [requests, setRequests] = useState("");
        const [gdpr, setGdpr] = useState(false);
        const [marketing, setMarketing] = useState(false);
    
        /* ─── UI state ─── */
        const [error, setError] = useState("");
        const [saving, setSaving] = useState(false);   // ★ new
        const [success, setSuccess] = useState(false);
    
        /* ─────────────────────────────────────────────
           fetch available slots whenever we ENTER step 2
           ───────────────────────────────────────────── */
        useEffect(() => {
            if (step !== 2) return;
            (async () => {
                try {
                    setLoadingSlots(true);
                    const data = await fetchAvailableTimeSlots({
                        date: format(date, "yyyy-MM-dd"),
                        mealType: meal,
                    });
                    setSlotData(data);
                } catch {
                    setSlotData(null);
                } finally {
                    setLoadingSlots(false);
                }
            })();
        }, [step, date, meal]);
    
        const next  = () => setStep((s) => s + 1);
        const back  = () => setStep((s) => s - 1);
        const reset = () => window.location.reload();
    
        /* ─── finalise ─── */
        const save = async () => {
            if (saving) return;             // double-click guard
            setError("");
    
            if (!fullName.trim() || !email.trim() || !gdpr) {
                return setError("Name, e-mail and GDPR consent are required.");
            }
            if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
                return setError("Invalid e-mail.");
            }
    
            setSaving(true);                // ★ spinner on
            try {
                await createBooking({
                    date:          format(date, "yyyy-MM-dd"),
                    meal_type:     meal,
                    reserved_time: time,
                    total_adults:  adults,
                    total_kids:    kids,
                    full_name:     fullName,
                    phone:         phoneNum ? `${phonePref} ${phoneNum}` : null,
                    email,
                    special_requests: requests,
                    gdpr_consent:     gdpr,
                    marketing_opt_in: marketing,
                    long_stay:        longStay,
                });
                setSuccess(true);
                setTimeout(reset, 2000);
            } catch (e) {
                setError(e.response?.data?.error || "Booking failed.");
            } finally {
                setSaving(false);           // ★ spinner off
            }
        };
    
        return (
            <div className="relative min-h-screen">
                <AnimatedBackground />
    
                <div className="relative flex items-center justify-center p-4">
                    <div className="relative bg-white p-8 rounded-lg shadow-lg w-full max-w-md">
    
                        {/* step indicators */}
                        <div className="flex justify-center space-x-2 mb-6">
                            {[1, 2, 3].map((i) => (
                                <div
                                    key={i}
                                    className={`w-8 h-8 rounded-full flex items-center justify-center ${
                                        step === i ? "bg-blue-600 text-white" : "bg-gray-200"
                                    }`}
                                >
                                    {i}
                                </div>
                            ))}
                        </div>
    
                        {/* step 1 */}
                        {step === 1 && (
                            <ReservationDetailsStep
                                adults={adults}
                                kids={kids}
                                onIncrementAdults={() => setAdults((v) => Math.min(v + 1, 20))}
                                onDecrementAdults={() => setAdults((v) => Math.max(v - 1, 1))}
                                onIncrementKids={() => setKids((v) => Math.min(v + 1, 20))}
                                onDecrementKids={() => setKids((v) => Math.max(v - 1, 0))}
                                date={date}
                                onDateSelect={setDate}
                                mealType={meal}
                                onSetMealType={setMeal}
                                error={error}
                                onContinue={() => {
                                    setError("");
                                    if (!date) return setError("Pick a date first.");
                                    next();
                                }}
                                onClose={reset}
                            />
                        )}
    
                        {/* step 2 */}
                        {step === 2 && (
                            <TimeSlotStep
                                mealType={meal}
                                date={date}
                                timeSlotData={slotData}
                                selectedRound={round}
                                onSelectRound={setRound}
                                isLoading={loadingSlots}
                                error={error}
                                onBack={back}
                                onContinue={(t) => {
                                    setTime(t);
                                    next();
                                }}
                            />
                        )}
    
                        {/* step 3 */}
                        {step === 3 && (
                            <ContactInfoStep
                                fullName={fullName}
                                phonePrefix={phonePref}
                                phoneNumber={phoneNum}
                                email={email}
                                specialRequests={requests}
                                gdprConsent={gdpr}
                                marketingOptIn={marketing}
                                longStay={longStay}
                                onChangeFullName={setFullName}
                                onChangePhonePrefix={setPhonePref}
                                onChangePhoneNumber={setPhoneNum}
                                onChangeEmail={setEmail}
                                onChangeSpecialRequests={setRequests}
                                onToggleGdpr={setGdpr}
                                onToggleMarketing={setMarketing}
                                onToggleLongStay={setLongStay}
                                adults={adults}
                                kids={kids}
                                selectedRound={round}
                                date={date}
                                error={error}
                                confirmationMessage=""
                                onBack={back}
                                onConfirmBooking={save}
                            />
                        )}
    
                        {/* ★ thinking spinner overlay */}
                        {saving && (
                            <div className="absolute inset-0 bg-black/60 flex items-center justify-center z-20">
                                <div className="w-12 h-12 border-4 border-blue-500 border-dashed rounded-full animate-spin" />
                            </div>
                        )}
    
                        {/* confirmation overlay */}
                        {success && (
                            <div className="absolute inset-0 bg-black/60 flex items-center justify-center z-30">
                                <div className="bg-white p-6 rounded shadow-lg">
                                    <p className="text-lg font-bold mb-2">Booking confirmed 🎉</p>
                                    <p>Returning…</p>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        );
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/components/bookingWizard/steps/ContactInfoStep.jsx
    import React from "react";
    import PropTypes from "prop-types";
    
    export default function ContactInfoStep({
                                                fullName,
                                                phonePrefix,
                                                phoneNumber,
                                                email,
                                                specialRequests,
                                                gdprConsent,
                                                marketingOptIn,
                                                longStay,
                                                onChangeFullName,
                                                onChangePhonePrefix,
                                                onChangePhoneNumber,
                                                onChangeEmail,
                                                onChangeSpecialRequests,
                                                onToggleGdpr,
                                                onToggleMarketing,
                                                onToggleLongStay,
                                                adults,
                                                kids,
                                                selectedRound,
                                                date,
                                                error,
                                                confirmationMessage,
                                                onBack,
                                                onConfirmBooking,
                                            }) {
        return (
            <div>
                <h2 className="text-2xl font-semibold mb-6 text-center">
                    Your Details
                </h2>
    
                {/* Full Name */}
                <div className="mb-4">
                    <label className="block mb-1 font-medium">Full Name*</label>
                    <input
                        className="w-full border rounded p-2"
                        value={fullName}
                        onChange={(e) => onChangeFullName(e.target.value)}
                    />
                </div>
    
                {/* Phone */}
                <div className="mb-4">
                    <label className="block mb-1 font-medium">Phone (optional)</label>
                    <div className="flex space-x-2">
                        <select
                            className="border rounded p-2"
                            value={phonePrefix}
                            onChange={(e) => onChangePhonePrefix(e.target.value)}
                        >
                            <option value="+34">+34</option>
                            <option value="+33">+33</option>
                            <option value="+44">+44</option>
                        </select>
                        <input
                            className="w-full border rounded p-2"
                            value={phoneNumber}
                            onChange={(e) => onChangePhoneNumber(e.target.value)}
                            placeholder="620 379 850"
                        />
                    </div>
                </div>
    
                {/* Email */}
                <div className="mb-4">
                    <label className="block mb-1 font-medium">Email*</label>
                    <input
                        className="w-full border rounded p-2"
                        type="email"
                        value={email}
                        onChange={(e) => onChangeEmail(e.target.value)}
                    />
                </div>
    
                {/* Long‑stay */}
                <div className="mb-4 flex items-center">
                    <input
                        type="checkbox"
                        checked={longStay}
                        onChange={(e) => onToggleLongStay(e.target.checked)}
                        className="mr-2"
                    />
                    <label className="text-sm">
                        Extended stay (birthday / celebration)
                    </label>
                </div>
    
                {/* Special Requests */}
                <div className="mb-4">
                    <label className="block mb-1 font-medium">Special Requests</label>
                    <textarea
                        className="w-full border rounded p-2"
                        rows="3"
                        value={specialRequests}
                        onChange={(e) => onChangeSpecialRequests(e.target.value)}
                    />
                </div>
    
                {/* GDPR */}
                <div className="mb-4 flex items-center">
                    <input
                        type="checkbox"
                        checked={gdprConsent}
                        onChange={(e) => onToggleGdpr(e.target.checked)}
                        className="mr-2"
                    />
                    <label className="text-sm">I consent to data processing (GDPR)*</label>
                </div>
    
                {/* Marketing */}
                <div className="mb-6 flex items-center">
                    <input
                        type="checkbox"
                        checked={marketingOptIn}
                        onChange={(e) => onToggleMarketing(e.target.checked)}
                        className="mr-2"
                    />
                    <label className="text-sm">Send me occasional offers</label>
                </div>
    
                {/* Summary */}
                <div className="mb-4 text-gray-700">
                    {adults} adult{adults!==1 && "s"}, {kids} kid{kids!==1 && "s"} –
                    {selectedRound.replace("_"," ")} on {date.toLocaleDateString()}
                </div>
    
                {error && <p className="text-red-600 mb-3">{error}</p>}
                {confirmationMessage && (
                    <p className="text-green-600 mb-3">{confirmationMessage}</p>
                )}
    
                <div className="flex justify-between">
                    <button onClick={onBack} className="px-4 py-2 border rounded">
                        Back
                    </button>
                    <button
                        onClick={onConfirmBooking}
                        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                    >
                        Finalise Booking
                    </button>
                </div>
            </div>
        );
    }
    
    ContactInfoStep.propTypes = {
        fullName:             PropTypes.string.isRequired,
        phonePrefix:          PropTypes.string.isRequired,
        phoneNumber:          PropTypes.string.isRequired,
        email:                PropTypes.string.isRequired,
        specialRequests:      PropTypes.string,
        gdprConsent:          PropTypes.bool.isRequired,
        marketingOptIn:       PropTypes.bool.isRequired,
        longStay:             PropTypes.bool.isRequired,
        onChangeFullName:     PropTypes.func.isRequired,
        onChangePhonePrefix:  PropTypes.func.isRequired,
        onChangePhoneNumber:  PropTypes.func.isRequired,
        onChangeEmail:        PropTypes.func.isRequired,
        onChangeSpecialRequests: PropTypes.func.isRequired,
        onToggleGdpr:         PropTypes.func.isRequired,
        onToggleMarketing:    PropTypes.func.isRequired,
        onToggleLongStay:     PropTypes.func.isRequired,
        adults:               PropTypes.number.isRequired,
        kids:                 PropTypes.number.isRequired,
        selectedRound:        PropTypes.string.isRequired,
        date:                 PropTypes.instanceOf(Date).isRequired,
        error:                PropTypes.string,
        confirmationMessage:  PropTypes.string,
        onBack:               PropTypes.func.isRequired,
        onConfirmBooking:     PropTypes.func.isRequired,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/components/bookingWizard/steps/ReservationDetailsStep.jsx
    import React from "react";
    import PropTypes from "prop-types";
    import DatePicker from "../../datePicker/DatePicker.jsx";
    import { getDayMealTypes } from "../../../services/datePicker.js";
    
    function mealInfo(mealType) {
        return mealType === "lunch"
            ? { label: "Comida", window: "(13:00–17:30)" }
            : { label: "Cena",   window: "(20:00–23:30)" };
    }
    
    export default function ReservationDetailsStep({
                                                       adults,
                                                       kids,
                                                       onIncrementAdults,
                                                       onDecrementAdults,
                                                       onIncrementKids,
                                                       onDecrementKids,
                                                       date,
                                                       onDateSelect,
                                                       mealType,
                                                       onSetMealType,
                                                       error,
                                                       onContinue,
                                                       onClose,
                                                   }) {
        const availableMeals = date ? getDayMealTypes(date.getDay()) : [];
        const lunch  = mealInfo("lunch");
        const dinner = mealInfo("dinner");
    
        return (
            <div>
                <h2 className="text-2xl font-semibold mb-6 text-center">
                    Choose Your Reservation
                </h2>
    
                {/* Adults */}
                <div className="mb-4">
                    <p className="font-medium mb-2">Adults</p>
                    <div className="flex items-center">
                        <button onClick={onDecrementAdults} className="bg-gray-200 px-3 py-1 rounded-l">
                            –
                        </button>
                        <div className="px-4 py-1 border-t border-b">{adults}</div>
                        <button onClick={onIncrementAdults} className="bg-gray-200 px-3 py-1 rounded-r">
                            +
                        </button>
                    </div>
                </div>
    
                {/* Kids */}
                <div className="mb-6">
                    <p className="font-medium mb-2">Kids</p>
                    <div className="flex items-center">
                        <button onClick={onDecrementKids} className="bg-gray-200 px-3 py-1 rounded-l">
                            –
                        </button>
                        <div className="px-4 py-1 border-t border-b">{kids}</div>
                        <button onClick={onIncrementKids} className="bg-gray-200 px-3 py-1 rounded-r">
                            +
                        </button>
                    </div>
                </div>
    
                {/* Date */}
                <div className="mb-6">
                    <p className="font-medium mb-2">Select Date</p>
                    <DatePicker selectedDate={date} onDateSelect={onDateSelect} />
                </div>
    
                {/* Meal Type */}
                <div className="mb-6">
                    <p className="font-medium mb-2">Meal Type</p>
                    <div className="flex space-x-3">
                        {availableMeals.includes("lunch") && (
                            <button
                                onClick={() => onSetMealType("lunch")}
                                className={`flex-1 px-4 py-2 rounded border text-center ${
                                    mealType === "lunch" ? "bg-blue-600 text-white" : "bg-gray-100"
                                }`}
                            >
                                {lunch.label}
                                <br />
                                <span className="text-xs">{lunch.window}</span>
                            </button>
                        )}
                        {availableMeals.includes("dinner") && (
                            <button
                                onClick={() => onSetMealType("dinner")}
                                className={`flex-1 px-4 py-2 rounded border text-center ${
                                    mealType === "dinner" ? "bg-blue-600 text-white" : "bg-gray-100"
                                }`}
                            >
                                {dinner.label}
                                <br />
                                <span className="text-xs">{dinner.window}</span>
                            </button>
                        )}
                    </div>
                </div>
    
                {error && <p className="text-red-500 mb-4">{error}</p>}
    
                <div className="flex justify-between">
                    <button onClick={onClose} className="px-4 py-2 border rounded">
                        Close
                    </button>
                    <button
                        onClick={onContinue}
                        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                    >
                        Continue
                    </button>
                </div>
            </div>
        );
    }
    
    ReservationDetailsStep.propTypes = {
        adults:              PropTypes.number.isRequired,
        kids:                PropTypes.number.isRequired,
        onIncrementAdults:   PropTypes.func.isRequired,
        onDecrementAdults:   PropTypes.func.isRequired,
        onIncrementKids:     PropTypes.func.isRequired,
        onDecrementKids:     PropTypes.func.isRequired,
        date:                PropTypes.instanceOf(Date).isRequired,
        onDateSelect:        PropTypes.func.isRequired,
        mealType:            PropTypes.oneOf(["lunch","dinner"]).isRequired,
        onSetMealType:       PropTypes.func.isRequired,
        error:               PropTypes.string,
        onContinue:          PropTypes.func.isRequired,
        onClose:             PropTypes.func.isRequired,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/components/bookingWizard/steps/TimeSlotStep.jsx
    import React, { useState, useEffect } from "react";
    import PropTypes from "prop-types";
    
    export default function TimeSlotStep({
                                             mealType,
                                             date,
                                             timeSlotData,
                                             selectedRound,
                                             onSelectRound,
                                             isLoading,
                                             error,
                                             onBack,
                                             onContinue,
                                         }) {
        const [selectedTime, setSelectedTime] = useState(null);
    
        useEffect(() => {
            setSelectedTime(null);
        }, [selectedRound]);
    
        const generateTimeOptions = (meal, round) => {
            let start, end;
            if (meal==="lunch" && round==="first_round") {
                start="13:00"; end="14:00";
            } else if (meal==="lunch" && round==="second_round") {
                start="15:00"; end="16:00";
            } else if (meal==="dinner" && round==="dinner_round") {
                start="20:00"; end="22:00";
            } else {
                return [];
            }
            const opts = [];
            const [sh,sm]=start.split(":").map(Number);
            const [eh,em]=end  .split(":").map(Number);
            for (let t=sh*60+sm; t<=eh*60+em; t+=15) {
                const hh=String(Math.floor(t/60)).padStart(2,"0");
                const mm=String(t%60       ).padStart(2,"0");
                opts.push(`${hh}:${mm}:00`);
            }
            return opts;
        };
    
        const next = () => {
            if (!selectedRound) return alert("Pick a round.");
            if (!selectedTime)  return alert("Pick a time.");
            onContinue(selectedTime);
        };
    
        return (
            <div>
                <h2 className="text-2xl font-semibold mb-6 text-center">
                    Select a Round
                </h2>
                <p className="mb-4 text-center">
                    Available rounds for {mealType==="lunch" ? "Comida" : "Cena"} on{" "}
                    {date.toLocaleDateString()}:
                </p>
    
                {isLoading ? (
                    <div className="flex justify-center items-center py-8">
                        <div className="w-8 h-8 border-4 border-blue-500 border-dashed rounded-full animate-spin" />
                    </div>
                ) : (
                    <div className="grid grid-cols-2 gap-4">
                        {mealType==="lunch" && timeSlotData && (
                            <>
                                <button
                                    onClick={()=>onSelectRound("first_round")}
                                    className={`px-4 py-2 rounded border text-center ${
                                        selectedRound==="first_round"
                                            ? "bg-blue-600 text-white"
                                            : "bg-gray-100"
                                    }`}
                                >
                                    1stRound
                                    <br />
                                    <span className="text-xs">{timeSlotData.first_round?.note}</span>
                                </button>
                                <button
                                    onClick={()=>onSelectRound("second_round")}
                                    className={`px-4 py-2 rounded border text-center ${
                                        selectedRound==="second_round"
                                            ? "bg-blue-600 text-white"
                                            : "bg-gray-100"
                                    }`}
                                >
                                    2ndRound
                                    <br />
                                    <span className="text-xs">
                      {timeSlotData.second_round?.note}
                    </span>
                                </button>
                            </>
                        )}
    
                        {mealType==="dinner" && timeSlotData && (
                            <button
                                onClick={()=>onSelectRound("dinner_round")}
                                className={`col-span-2 px-4 py-2 rounded border text-center ${
                                    selectedRound==="dinner_round"
                                        ? "bg-blue-600 text-white"
                                        : "bg-gray-100"
                                }`}
                            >
                                Dinner
                                <br />
                                <span className="text-xs">
                    {timeSlotData.dinner_round?.note}
                  </span>
                            </button>
                        )}
                    </div>
                )}
    
                {/* time buttons */}
                {selectedRound && (
                    <div className="mt-4 p-4 border rounded bg-gray-50">
                        <p className="text-center font-medium mb-2">Select a Time</p>
                        <div className="grid grid-cols-4 gap-2">
                            {generateTimeOptions(mealType, selectedRound).map((t) => (
                                <button
                                    key={t}
                                    onClick={() => setSelectedTime(t)}
                                    className={`px-2 py-1 rounded border text-center ${
                                        selectedTime===t
                                            ? "bg-blue-600 text-white"
                                            : "bg-gray-100 hover:bg-blue-200"
                                    }`}
                                >
                                    {t.slice(0,5)}
                                </button>
                            ))}
                        </div>
                    </div>
                )}
    
                {error && <p className="text-red-500 mt-4">{error}</p>}
    
                <div className="flex justify-between mt-6">
                    <button onClick={onBack}    className="px-4 py-2 border rounded">
                        Back
                    </button>
                    <button onClick={next}      className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                        Continue
                    </button>
                </div>
            </div>
        );
    }
    
    TimeSlotStep.propTypes = {
        mealType:      PropTypes.oneOf(["lunch","dinner"]).isRequired,
        date:          PropTypes.instanceOf(Date).isRequired,
        timeSlotData:  PropTypes.object,
        selectedRound: PropTypes.string,
        onSelectRound: PropTypes.func.isRequired,
        isLoading:     PropTypes.bool,
        error:         PropTypes.string,
        onBack:        PropTypes.func.isRequired,
        onContinue:    PropTypes.func.isRequired,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/components/datePicker/Calendar.jsx
    import React from "react";
    import PropTypes from "prop-types";
    import {
        format,
        startOfMonth,
        endOfMonth,
        startOfWeek,
        endOfWeek,
        addDays,
        subMonths,
        addMonths,
        isSameMonth,
        isSameDay,
        isBefore,
        isAfter,
    } from "date-fns";
    import { getDayMealTypes } from "../../services/datePicker.js";
    
    export default function Calendar({
                                         currentMonth,
                                         setCurrentMonth,
                                         today,
                                         maxDate,
                                         selectedDate,
                                         onDateSelect,
                                         availabilityMap,
                                         closedDays = [],
                                     }) {
        // build a set for O(1) lookups
        const closedSet = new Set(closedDays);
    
        const renderDayHeaders = () => {
            return (
                <div className="grid grid-cols-7 text-center font-bold mb-1">
                    {["Mon","Tue","Wed","Thu","Fri","Sat","Sun"].map((d) => (
                        <div key={d}>{d}</div>
                    ))}
                </div>
            );
        };
    
        const monthStart = startOfMonth(currentMonth);
        const monthEnd   = endOfMonth(currentMonth);
        const gridStart  = startOfWeek(monthStart, { weekStartsOn: 1 });
        const gridEnd    = endOfWeek(monthEnd,   { weekStartsOn: 1 });
    
        const getStatus = (day) => {
            const ds = format(day, "yyyy-MM-dd");
    
            if (isBefore(day, today)) {
                return { status: "past", msg: "Date has passed" };
            }
            if (isAfter(day, maxDate)) {
                return { status: "no-data", msg: "No tables available" };
            }
            if (closedSet.has(ds)) {
                return { status: "closed", msg: "Closed" };
            }
    
            const mealTypes = getDayMealTypes(day.getDay());
            if (mealTypes.length === 0) {
                return { status: "closed", msg: "Closed" };
            }
    
            // if availabilityMap is missing this day, consider it loading
            const lunchKey = `${ds}_lunch`;
            const lunchData = availabilityMap[lunchKey];
            if (lunchData === undefined) {
                return { status: "loading", msg: "Loading..." };
            }
            // if lunch is closed or full, check dinner if offered
            if (lunchData === null) {
                if (mealTypes.includes("dinner")) {
                    const dinnerData = availabilityMap[`${ds}_dinner`];
                    if (dinnerData === undefined) {
                        return { status: "loading", msg: "Loading..." };
                    }
                    const hasSpace = Object.values(dinnerData.dinner_round.availability || {}).reduce(
                        (sum, v) => sum + v,
                        0
                    ) > 0;
                    if (hasSpace) return { status: "available", msg: "" };
                }
                return { status: "closed", msg: "Closed" };
            }
            // if lunch has capacity
            const availCount = Object.values(lunchData.first_round.availability || {}).reduce(
                (sum, v) => sum + v, 0
            ) + Object.values(lunchData.second_round.availability || {}).reduce(
                (sum, v) => sum + v, 0
            );
            if (availCount <= 0) {
                // same dinner fallback
                if (mealTypes.includes("dinner")) {
                    const dinnerData = availabilityMap[`${ds}_dinner`];
                    if (dinnerData === undefined) {
                        return { status: "loading", msg: "Loading..." };
                    }
                    const hasSpace = Object.values(dinnerData.dinner_round.availability || {}).reduce(
                        (sum, v) => sum + v,
                        0
                    ) > 0;
                    if (hasSpace) return { status: "available", msg: "" };
                }
                return { status: "full", msg: "Full" };
            }
            return { status: "available", msg: "" };
        };
    
        const rows = [];
        let dayPtr = gridStart;
        while (dayPtr <= gridEnd) {
            const week = [];
            for (let i = 0; i < 7; i++) {
                const d = dayPtr;
                const { status, msg } = getStatus(d);
                const inMonth  = isSameMonth(d, monthStart);
                const selected = selectedDate && isSameDay(d, selectedDate);
    
                let bg  = "bg-white";
                let txt = inMonth ? "text-gray-800" : "text-gray-400";
                if (status === "closed")   { bg = "bg-red-200";   txt = "text-red-800"; }
                else if (status === "past")   { bg = "bg-gray-300";  txt = "text-gray-500 line-through"; }
                else if (status === "no-data") { bg = "bg-yellow-100"; txt = "text-yellow-800"; }
                else if (status === "full")   { bg = "bg-red-300";   txt = "text-red-900"; }
                if (selected)                { bg = "bg-blue-600";   txt = "text-white"; }
    
                week.push(
                    <button
                        key={d.toISOString()}
                        onClick={() => !["past","closed","full","no-data"].includes(status) && onDateSelect(d)}
                        disabled={["past","closed","full","no-data"].includes(status)}
                        className={`${bg} ${txt} relative p-2 h-24 border border-gray-200 flex flex-col items-center justify-center hover:bg-blue-50 transition`}
                        style={{ minWidth: 50 }}
                        title={msg || format(d, "EEEE, MMMM d, yyyy")}
                    >
                        <span className="text-sm font-semibold">{format(d, "d")}</span>
                        {status === "available" && null}
                    </button>
                );
                dayPtr = addDays(dayPtr, 1);
            }
            rows.push(<div key={dayPtr.toISOString()} className="grid grid-cols-7">{week}</div>);
        }
    
        return (
            <div className="bg-white p-4 rounded shadow">
                <div className="flex items-center justify-between mb-2">
                    <button onClick={() => setCurrentMonth((m) => subMonths(m, 1))} className="px-2 py-1 bg-gray-200 rounded hover:bg-gray-300">
                        Prev
                    </button>
                    <h3 className="font-semibold">{format(currentMonth, "MMMM yyyy")}</h3>
                    <button onClick={() => setCurrentMonth((m) => addMonths(m, 1))} className="px-2 py-1 bg-gray-200 rounded hover:bg-gray-300">
                        Next
                    </button>
                </div>
    
                {renderDayHeaders()}
                {rows}
            </div>
        );
    }
    
    Calendar.propTypes = {
        currentMonth:    PropTypes.instanceOf(Date).isRequired,
        setCurrentMonth: PropTypes.func.isRequired,
        today:           PropTypes.instanceOf(Date).isRequired,
        maxDate:         PropTypes.instanceOf(Date).isRequired,
        selectedDate:    PropTypes.instanceOf(Date),
        onDateSelect:    PropTypes.func.isRequired,
        availabilityMap: PropTypes.object.isRequired,
        closedDays:      PropTypes.arrayOf(PropTypes.string),
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/components/datePicker/Compact.jsx
    import React from "react";
    import PropTypes from "prop-types";
    import { format, addDays, isSameDay, isBefore, isAfter } from "date-fns";
    import { getDayMealTypes } from "../../services/datePicker.js";
    
    export default function Compact({
                                        today,
                                        maxDate,
                                        selectedDate,
                                        onDateSelect,
                                        availabilityMap,
                                        closedDays = [],
                                    }) {
        const closedSet = new Set(closedDays);
        const days = Array.from({ length: 7 }, (_, i) => addDays(today, i));
    
        const getStatus = (d) => {
            const ds = format(d, "yyyy-MM-dd");
            if (isBefore(d, today)) return { status: "past", msg: "Date has passed" };
            if (isAfter(d, maxDate)) return { status: "no-data", msg: "No tables available" };
            if (closedSet.has(ds))  return { status: "closed", msg: "Closed" };
    
            const mealTypes = getDayMealTypes(d.getDay());
            if (mealTypes.length === 0) return { status: "closed", msg: "Closed" };
    
            const lunchKey = `${ds}_lunch`;
            const l = availabilityMap[lunchKey];
            if (l === undefined) return { status: "loading", msg: "Loading..." };
            if (l === null) {
                if (mealTypes.includes("dinner")) {
                    const dd = availabilityMap[`${ds}_dinner`];
                    if (dd === undefined) return { status: "loading", msg: "Loading..." };
                    const hasSpace = Object.values(dd.dinner_round.availability || {}).reduce(
                        (sum, v) => sum + v,
                        0
                    ) > 0;
                    if (hasSpace) return { status: "available", msg: "" };
                }
                return { status: "closed", msg: "Closed" };
            }
            const availLunch = Object.values(l.first_round.availability || {}).reduce((sum, v) => sum + v, 0)
                + Object.values(l.second_round.availability || {}).reduce((sum, v) => sum + v, 0);
            if (availLunch <= 0) {
                if (mealTypes.includes("dinner")) {
                    const dd = availabilityMap[`${ds}_dinner`];
                    if (dd === undefined) return { status: "loading", msg: "Loading..." };
                    const hasSpace = Object.values(dd.dinner_round.availability || {}).reduce(
                        (sum, v) => sum + v,
                        0
                    ) > 0;
                    if (hasSpace) return { status: "available", msg: "" };
                }
                return { status: "full", msg: "Full" };
            }
            return { status: "available", msg: "" };
        };
    
        return (
            <div className="flex space-x-2 overflow-x-auto p-2" role="list">
                {days.map((d) => {
                    const sel = isSameDay(d, selectedDate);
                    const { status, msg } = getStatus(d);
                    const disabled = ["past", "closed", "full", "no-data"].includes(status);
    
                    let bg = "bg-gray-100", txt = "text-gray-800";
                    if (status === "past")      { bg = "bg-gray-300";  txt = "text-gray-500 line-through"; }
                    else if (status === "closed"){ bg = "bg-red-200";   txt = "text-red-900"; }
                    else if (status === "full")  { bg = "bg-red-300";   txt = "text-red-900"; }
                    else if (status === "no-data"){ bg = "bg-yellow-200"; txt = "text-yellow-800"; }
                    if (sel) { bg = "bg-blue-600"; txt = "text-white"; }
    
                    return (
                        <button
                            key={d.toISOString()}
                            onClick={() => !disabled && onDateSelect(d)}
                            disabled={disabled}
                            className={`flex flex-col items-center w-16 py-2 rounded ${bg} ${txt} ${
                                disabled ? "cursor-not-allowed" : "cursor-pointer"
                            } transition hover:bg-blue-200`}
                            title={msg || format(d, "EEEE, MMMM d, yyyy")}
                        >
                            <span className="text-xs">{isSameDay(d, today) ? "Today" : format(d, "EEE")}</span>
                            <span className="text-xl font-bold">{format(d, "d")}</span>
                            <span className="text-xs">{format(d, "MMM")}</span>
                        </button>
                    );
                })}
            </div>
        );
    }
    
    Compact.propTypes = {
        today:           PropTypes.instanceOf(Date).isRequired,
        maxDate:         PropTypes.instanceOf(Date).isRequired,
        selectedDate:    PropTypes.instanceOf(Date),
        onDateSelect:    PropTypes.func.isRequired,
        availabilityMap: PropTypes.object.isRequired,
        closedDays:      PropTypes.arrayOf(PropTypes.string),
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/components/datePicker/DatePicker.jsx
    import React, { useState, useEffect } from "react";
    import PropTypes from "prop-types";
    import axios from "axios";
    import {
        format,
        addDays,
        startOfMonth,
        endOfMonth,
    } from "date-fns";
    
    import Compact from "./Compact";
    import Calendar from "./Calendar";
    import SkeletonCompact from "./SkeletonCompact";
    import SkeletonCalendar from "./SkeletonCalendar";
    
    const API_URL = import.meta.env.VITE_API_URL || "http://127.0.0.1:8000/api";
    
    export default function DatePicker({
                                           selectedDate = null,          // ← default moved here
                                           onDateSelect,
                                       }) {
        const [viewMode, setViewMode] = useState("compact");
        const [currentMonth, setCurrentMonth] = useState(new Date());
        const [availabilityMap, setAvailabilityMap] = useState({});
        const [isFetchingRange, setIsFetchingRange] = useState(false);
        const [closedDays, setClosedDays] = useState([]);
    
        const today = new Date();
        const maxDate = addDays(today, 30);
    
        // ─── fetch exceptional closed days ──────────────────────
        useEffect(() => {
            (async () => {
                try {
                    const { data } = await axios.get(`${API_URL}/closed-days`);
                    const normalized = Array.isArray(data)
                        ? data.map((d) => d.slice(0, 10))
                        : [];
                    setClosedDays(normalized);
                } catch (e) {
                    console.error("Failed to fetch closed days:", e);
                }
            })();
        }, []);
    
        // ─── compact → next 7 days ─────────────────────────────
        useEffect(() => {
            if (viewMode !== "compact") return;
            (async () => {
                setIsFetchingRange(true);
                try {
                    const start = format(today, "yyyy-MM-dd");
                    const end = format(addDays(today, 6), "yyyy-MM-dd");
                    const [lunchRes, dinnerRes] = await Promise.all([
                        axios.get(`${API_URL}/table-availability-range`, {
                            params: { start, end, mealType: "lunch" },
                        }),
                        axios.get(`${API_URL}/table-availability-range`, {
                            params: { start, end, mealType: "dinner" },
                        }),
                    ]);
    
                    const mapCopy = { ...availabilityMap };
                    Object.entries(lunchRes.data).forEach(([d, info]) => {
                        mapCopy[`${d}_lunch`] = info === "closed" ? null : info;
                    });
                    Object.entries(dinnerRes.data).forEach(([d, info]) => {
                        mapCopy[`${d}_dinner`] = info === "closed" ? null : info;
                    });
                    setAvailabilityMap(mapCopy);
                } catch (e) {
                    console.error("Failed fetch 7d:", e);
                } finally {
                    setIsFetchingRange(false);
                }
            })();
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [viewMode]);
    
        // ─── calendar → full month ─────────────────────────────
        useEffect(() => {
            if (viewMode !== "calendar") return;
            (async () => {
                setIsFetchingRange(true);
                try {
                    const ms = format(startOfMonth(currentMonth), "yyyy-MM-dd");
                    const me = format(endOfMonth(currentMonth), "yyyy-MM-dd");
                    const [lunchRes, dinnerRes] = await Promise.all([
                        axios.get(`${API_URL}/table-availability-range`, {
                            params: { start: ms, end: me, mealType: "lunch" },
                        }),
                        axios.get(`${API_URL}/table-availability-range`, {
                            params: { start: ms, end: me, mealType: "dinner" },
                        }),
                    ]);
    
                    const mapCopy = { ...availabilityMap };
                    Object.entries(lunchRes.data).forEach(([d, info]) => {
                        mapCopy[`${d}_lunch`] = info === "closed" ? null : info;
                    });
                    Object.entries(dinnerRes.data).forEach(([d, info]) => {
                        mapCopy[`${d}_dinner`] = info === "closed" ? null : info;
                    });
                    setAvailabilityMap(mapCopy);
                } catch (e) {
                    console.error("Failed month fetch:", e);
                } finally {
                    setIsFetchingRange(false);
                }
            })();
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [viewMode, currentMonth]);
    
        return (
            <div className="date-picker">
                {/* view-mode toggle */}
                <div className="flex justify-end mb-2">
                    <button
                        onClick={() =>
                            setViewMode((prev) =>
                                prev === "compact" ? "calendar" : "compact"
                            )
                        }
                        className="text-sm underline focus:outline-none"
                    >
                        {viewMode === "compact" ? "Calendar View" : "Compact View"}
                    </button>
                </div>
    
                {/* skeletons vs. real views */}
                {isFetchingRange ? (
                    viewMode === "compact" ? (
                        <SkeletonCompact />
                    ) : (
                        <SkeletonCalendar />
                    )
                ) : viewMode === "compact" ? (
                    <Compact
                        today={today}
                        maxDate={maxDate}
                        selectedDate={selectedDate}
                        onDateSelect={onDateSelect}
                        availabilityMap={availabilityMap}
                        closedDays={closedDays}
                    />
                ) : (
                    <Calendar
                        currentMonth={currentMonth}
                        setCurrentMonth={setCurrentMonth}
                        today={today}
                        maxDate={maxDate}
                        selectedDate={selectedDate}
                        onDateSelect={onDateSelect}
                        availabilityMap={availabilityMap}
                        closedDays={closedDays}
                    />
                )}
            </div>
        );
    }
    
    DatePicker.propTypes = {
        selectedDate: PropTypes.instanceOf(Date),
        onDateSelect: PropTypes.func.isRequired,
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/components/datePicker/SkeletonCalendar.jsx
    import React from "react";
    
    export default function SkeletonCalendar() {
        const cells = Array.from({ length: 42 });
        return (
            <div>
                <div className="flex justify-between items-center mb-2">
                    <div className="w-8 h-5 bg-gray-200 animate-pulse rounded" />
                    <div className="w-32 h-5 bg-gray-200 animate-pulse rounded" />
                    <div className="w-8 h-5 bg-gray-200 animate-pulse rounded" />
                </div>
                <div className="grid grid-cols-7 gap-2">
                    {cells.map((_,i) => (
                        <div key={i} className="w-10 h-10 bg-gray-200 rounded animate-pulse m-1" />
                    ))}
                </div>
            </div>
        );
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/components/datePicker/SkeletonCompact.jsx
    import React from "react";
    
    export default function SkeletonCompact() {
        const days = Array.from({ length: 7 });
        return (
            <div className="flex space-x-2 overflow-x-auto p-2">
                {days.map((_,i) => (
                    <div
                        key={i}
                        className="w-12 h-20 bg-gray-200 rounded animate-pulse flex flex-col items-center p-2"
                    >
                        <div className="w-8 h-3 bg-gray-300 rounded mb-1" />
                        <div className="w-6 h-4 bg-gray-300 rounded mb-1" />
                        <div className="w-8 h-3 bg-gray-300 rounded" />
                    </div>
                ))}
            </div>
        );
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/index.css
    /* src/index.css or src/main.css */
    
    @tailwind base;
    @tailwind components;
    @tailwind utilities;

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/main.jsx
    // src/main.jsx
    import React from "react";
    import ReactDOM from "react-dom/client";
    import App from "./App";
    import "./index.css"; // or "./main.css" — your Tailwind file
    
    ReactDOM.createRoot(document.getElementById("root")).render(
        <React.StrictMode>
            <App />
        </React.StrictMode>
    );

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/pages/BookingPage.jsx
    import React from "react";
    import BookingWizard from "../components/bookingWizard/BookingWizard";
    
    const BookingPage = () => {
        return (
            <div>
                {/* bookingWizard contains the multi-step booking process */}
                <BookingWizard />
            </div>
        );
    };
    
    export default BookingPage;

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/services/bookingService.js
    import axios from "axios";
    axios.defaults.baseURL = ""; // proxy via Vite
    
    /*──────────────────────────────────────────────
      Simple in-memory cache for table availability
    ──────────────────────────────────────────────*/
    const _taCache = new Map();
    const buildKey = (start, end, meal) => `${start}|${end}|${meal}`;
    
    /**
     * Clear every cached /api/table-availability-range response.
     * Call this after any action (e.g. closing/opening a day)
     * that could invalidate previously-fetched data.
     */
    export function clearAvailabilityCache() {
        _taCache.clear();
    }
    
    export async function fetchTableAvailabilityRange(
        start,
        end,
        mealType = "lunch"
    ) {
        const key = buildKey(start, end, mealType);
        const hit = _taCache.get(key);
    
        if (hit?.status === "resolved") return hit.data;
    
        if (hit?.status === "pending") return hit.promise;
    
        const promise = axios
            .get("/api/table-availability-range", {
                params: { start, end, mealType },
            })
            .then((res) => {
                _taCache.set(key, { status: "resolved", data: res.data });
                return res.data;
            })
            .catch((err) => {
                _taCache.delete(key);
                throw err;
            });
    
        _taCache.set(key, { status: "pending", promise });
        return promise;
    }
    
    /*──────────────────────────────────────────────
      Other booking-related helpers
    ──────────────────────────────────────────────*/
    export async function fetchAvailableTimeSlots(params) {
        const { data } = await axios.get("/api/table-availability", { params });
        return data;
    }
    
    export async function fetchAllBookings() {
        const { data } = await axios.get("/api/bookings");
        return data.data;
    }
    
    export async function createBooking(payload) {
        const { data } = await axios.post("/api/bookings", payload);
        return data;
    }
    
    export async function updateBooking(id, payload) {
        const { data } = await axios.patch(`/api/bookings/${id}`, payload);
        return data;
    }
    
    export async function deleteBooking(id) {
        const { data } = await axios.delete(`/api/bookings/${id}`);
        return data;
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/services/datePicker.js
    import { isBefore, isAfter, format } from "date-fns";
    
    /**
     * dayOfWeek: 0=Sun,1=Mon…6=Sat
     */
    export function getDayMealTypes(dayOfWeek) {
        switch (dayOfWeek) {
            case 1: // Mon
            case 2: // Tue
                return []; // closed
            case 3: // Wed
            case 4: // Thu
                return ["lunch"];
            case 5: // Fri
            case 6: // Sat
            case 0: // Sun
                return ["lunch", "dinner"];
            default:
                return [];
        }
    }
    
    export function sumAvailability(dayAvailability) {
        if (!dayAvailability || typeof dayAvailability !== "object") return 0;
        let sum = 0;
    
        // lunch rounds
        ["first_round", "second_round"].forEach((rk) => {
            Object.values(dayAvailability[rk]?.availability || {}).forEach((v) => {
                sum += v;
            });
        });
    
        // dinner
        Object.values(dayAvailability.dinner_round?.availability || {}).forEach((v) => {
            sum += v;
        });
    
        return sum;
    }
    
    /**
     * true if dateA < dateB or same calendar day
     */
    export function isBeforeOrSameDay(dateA, dateB) {
        return isBefore(dateA, dateB) || format(dateA, "yyyy-MM-dd") === format(dateB, "yyyy-MM-dd");
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/services/mealOverrides.js
    /* Simple fetch helpers for meal-override endpoints */
    
    export async function fetchMealOverrides() {
        const resp = await fetch("/api/meal-overrides");
        const data = await resp.json();
        return Array.isArray(data) ? data : [];
    }
    
    export async function toggleMealOverride(dateYMD, mealType) {
        await fetch("/api/meal-overrides/toggle", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ date: dateYMD, meal_type: mealType }),
        });
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/src/services/settingsService.js
    import axios from "axios";
    
    /* ───────────────────────────────
       Close / open a specific day
       ─────────────────────────────── */
    
    /**
     * Mark a calendar day as “closed”.
     * Backend will usually toggle, but we expose
     * a single-purpose helper for clarity.
     *
     * @param {string} dateYMD – “YYYY-MM-DD”
     */
    export async function closeSpecificDay(dateYMD) {
        const { data } = await axios.post("/api/closed-days/toggle", {
            date: dateYMD,
        });
        return data;           // whatever the API echoes back
    }
    
    /* ───────────────────────────────
       Booking-window helpers
       ─────────────────────────────── */
    
    /**
     * Extend the booking window so guests can
     * book **up to and including** this date.
     *
     * @param {string} dateYMD – “YYYY-MM-DD”
     */
    export async function openBookingWindowUntil(dateYMD) {
        const { data } = await axios.put("/api/settings/booking-open-until", {
            booking_open_until: dateYMD,
        });
        return data.booking_open_until;
    }

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/tailwind.config.js
    // tailwind.config.js
    
    /** @type {import('tailwindcss').Config} */
    module.exports = {
      content: [
        "./index.html",
        "./src/**/*.{js,jsx,ts,tsx}",
      ],
      theme: {
        extend: {},
      },
      plugins: [],
    };

––––––––––––––––––––––––
/mnt/c/Users/sterr/PhpstormProjects/myProject/frontend-booking/vite.config.js
    // vite.config.js
    import { defineConfig } from 'vite'
    import react from '@vitejs/plugin-react'
    
    export default defineConfig({
      plugins: [react()],
      server: {
        proxy: {
          '/api': 'http://localhost:8000',
        },
      },
    })

